<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[凸优化DP]]></title>
    <url>%2Fblogs%2F%E5%87%B8%E4%BC%98%E5%8C%96DP%2F</url>
    <content type="text"><![CDATA[凸优化DP简介凸优化用于一类dp优化的问题 可以把一个$O(n)$的复杂度优化成$O(\log n)$ 如果我们最后的dp数组在某一维上是凸壳就可以用凸壳来维护 在这种问题中我们如果不管这一维的影响可以很快地求出极值 我们就可以用凸优化的思想来操作 算法流程假设我们的dp数组是$F(x)$并且满足$F(x)$的导数是单调函数 我们就可以对$F$函数进行一定的修改使得$F’(x)=F(x)+kx$函数的极值落在我们需要求的那一个点上 于是我们可以对斜率k进行二分，来求出最合适的那一个值 具体来说，这道题里面我们需要求的是树上k+1条点不相交路径的最大权值和 我们发现如果设$F(x)$表示选出x条不相交路径的最大权值，最后的F函数是一个上凸壳 然后我们就可以考虑二分出斜率的偏移量$w$ 考虑它的实际意义，就是说每次多选出一条路径就需要加上额外的$w$代价，这样dp我们只需要记录最值和对应的路径条数就可以了 至于是要让路径条数最大化还是最小化因题而异 其实挺简单的算法，多做几道题就会了 loj2478floj1935WF2016 B]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>DP-优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可持久化点分树]]></title>
    <url>%2Fblogs%2F%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%82%B9%E5%88%86%E6%A0%91%2F</url>
    <content type="text"><![CDATA[可持久化点分树简介在一些神奇的问题中，光是维护点分树（动态点分治）是完全没有办法解决问题的，例如这道题，我们发现查询的区间是和树的形态无关的，这样的问题就不能单纯维护点分树，需要对点分树进行可持久化 算法流程前置技能1.0 点分治关于这个可以去看我上古时期的blog，如果这个都看不懂就直接退群吧。。。。 前置技能2.0 点分树（动态点分治）听起来在点分治上加上了动态两个字，其实就是把点分治中分治中心用树型关系表示出来 在统计到一个点的信息的时候，我们就直接从这个点出发，往点分树父亲节点上跳，比如我们需要查询到u节点距离小于等k的点的个数，我们就先看当前分治中心u管辖区域内有多少个点和他的距离小于等于k，然后我们跳到prt[u]，查询在prt[u]的子树里面有多少个距离小于等于k - dis(prt[u], u)的节点，但是我们发现u的管辖区域内的点存在重复计算，所以我们需要把这一部分用相同的方法容斥掉，就可以计算答案了 修改和查询十分类似，不赘讲（江老著名梗）了 进入正题可持久化点分树，就拿上面哪个cf题做例子吧，用问题作为切入点可能会好一些 首先我们可以发现这道题的查询是和树无关的，如果只有单点的查询是很快可以在点分树上处理出来的 并且我们知道查询是可以转化成前缀和查询的，于是就有了维护可持久化点分树的思路 因为平常的点分我们是从下到上更新，这次需要变成从上到下的插入，并且在点分树上添加出来一条新的链，所以在考虑继承上一个点分树的状态的时候，我们需要在插入的时候继承不改变的子树的信息，因此我们需要先将原来的树进行三度化处理，这样每个分治重心的儿子最多只有三个，就可以处理了 三度化的技巧主要在于理解左兄弟右儿子的思路，把所有的兄弟用长度为0的边串起来，这样在新的树上的距离就是在原树上的距离了，并且因为串两个兄弟只需要1个点，所以新的树的总点数也是$O(n)$级别的，不影响复杂度 具体代码实现长成这样：12345678910111213141516171819202122232425262728void rebuild(int u, int fa) &#123; int last = 0, tmp = 0; for (auto cur : edge[u]) &#123; int v = cur.first, w = cur.second; if (v == fa) continue; ++tmp; if (tmp == 1) &#123; addedge(u, v, w); addedge(v, u, w); last = u; &#125; else if (tmp == ((signed) edge[u].size()) - (u != 1)) &#123; addedge(last, v, w); addedge(v, last, w); &#125; else &#123; m++; addedge(last, m, 0); addedge(m, last, 0); last = m; addedge(m, v, w); addedge(v, m, w); &#125; &#125; for (auto cur : edge[u]) &#123; int v = cur.first; if (v == fa) continue; rebuild(v, u); &#125;&#125; 其中edge是原树的边，addedge是新树的边然后因为我们需要在点分树上更新一直到节点u（当前的更新节点）所以我们需要记录一下在点分树上u的每个祖先v是prt[v]的哪一个儿子这个可以在第一次点分树预处理出来 然后为了保证复杂度（不要多一个log）最好用$O(n\log n)$预处理，$O(1)$查询的LCA就是在欧拉序上进行处理 123456789101112131415161718192021222324252627282930313233343536373839404142434445namespace LCA &#123;int dep[N], st[N &lt;&lt; 1][LOG], dfn[N], Log[N &lt;&lt; 1], ind = 0;ll dis[N];void dfs(int u, int fa) &#123; st[dfn[u] = ++ind][0] = u; for (int i = head[u]; i; i = E[i].nxt) &#123; int v = E[i].v; if (v == fa) continue; dep[v] = dep[u] + 1; dis[v] = dis[u] + E[i].w; dfs(v, u); st[++ind][0] = u; &#125;&#125;int checkmin(int x, int y) &#123; return dep[x] &lt; dep[y] ? x : y;&#125;void ST() &#123; dfs(1, 0); for (int i = 2; i &lt;= ind; i++) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; for (int j = 1; j &lt; LOG; j++) &#123; for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= ind; i++) &#123; st[i][j] = checkmin(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]); &#125; &#125;&#125;int lca(int x, int y) &#123; x = dfn[x], y = dfn[y]; if (x &gt; y) swap(x, y); int k = Log[y - x + 1]; return checkmin(st[x][k], st[y - (1 &lt;&lt; k) + 1][k]);&#125;ll getdis(int x, int y) &#123; return dis[x] + dis[y] - dis[lca(x, y)] * 2;&#125;&#125; 然后我们考虑普通的点分树在维护什么东西首先是用来记录信息的值和用来进行容斥的值，因为这道题只需要记录距离，所以我们用两个值来表示就可以了，如果需要更复杂的维护就需要用到高级的数据结构了 我们查询到一个点的距离和的时候首先从根往下走，假设当前节点是v，查询节点是u，那么v除了u所在子树的所有点到u的所有距离就是除了u子树所有节点到v的距离和加上除了u所有子树的大小乘上u到v的距离 于是我们就可以进行容斥了 点分树部分的代码是这样的：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283namespace Tree_Devide &#123;struct Node &#123; int ch[3], id, siz; ll sum[2];&#125; s[N * LOG];int siz[N], F[N], dep[N], siz_all, rt, cnt = 0;int root[N];bool vis[N];vector&lt;int&gt; pre[N];void getroot(int u, int fa) &#123; siz[u] = 1; F[u] = 0; for (int i = head[u]; i; i = E[i].nxt) &#123; int v = E[i].v; if (v == fa || vis[v]) continue; getroot(v, u); siz[u] += siz[v]; F[u] = max(F[u], siz[v]); &#125; F[u] = max(F[u], siz_all - siz[u]); if (F[u] &lt; F[rt]) rt = u;&#125;void devide(int u) &#123; vis[u] = 1; s[u].id = u; for (int i = head[u]; i; i = E[i].nxt) &#123; int v = E[i].v; if (vis[v]) continue; F[rt = 0] = siz_all = siz[v]; getroot(v, 0); dep[rt] = dep[u] + 1; for (int j : pre[u]) &#123; pre[rt].push_back(j); &#125; for (int j = 0; j &lt; 3; j++) &#123; if (s[u].ch[j]) continue; s[u].ch[j] = rt; pre[rt].push_back(j); devide(rt); break; &#125; &#125;&#125;void insert(int &amp;t, int las, int u, int fa) &#123; t = ++cnt; s[t] = s[las]; s[t].siz++; s[t].sum[0] += getdis(s[t].id, u); if (fa) &#123; s[t].sum[1] += getdis(s[fa].id, u); &#125; if (s[t].id == u) return; insert(s[t].ch[pre[u][dep[s[t].id]]], s[las].ch[pre[u][dep[s[t].id]]], u, t);&#125;ll query(int t, int u) &#123; ll res = 0; for (int i = 0; i &lt; dep[u]; i++) &#123; int cur = s[t].ch[pre[u][i]]; res += (s[t].siz - s[cur].siz) * getdis(s[t].id, u) + s[t].sum[0] - s[cur].sum[1]; t = cur; &#125; res += s[t].sum[0]; return res;&#125;void build() &#123; F[rt = 0] = siz_all = cnt = m; getroot(1, 0); root[0] = rt; devide(rt); for (int i = 1; i &lt;= n; i++) &#123; insert(root[i], root[i - 1], a[i], 0); &#125;&#125;&#125; 然后放一下cf757g的完整代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;typedef pair&lt;int, int&gt; pi;const int N = 4e5 + 10;const int LOG = 20;struct Edge &#123; int v, w, nxt;&#125; E[N &lt;&lt; 1];int head[N], tot = 0;int n, m, q, a[N];vector&lt;pi&gt; edge[N];void addedge(int u, int v, int w) &#123; E[++tot] = (Edge) &#123;v, w, head[u]&#125;; head[u] = tot;&#125;void rebuild(int u, int fa) &#123; int last = 0, tmp = 0; for (auto cur : edge[u]) &#123; int v = cur.first, w = cur.second; if (v == fa) continue; ++tmp; if (tmp == 1) &#123; addedge(u, v, w); addedge(v, u, w); last = u; &#125; else if (tmp == ((signed) edge[u].size()) - (u != 1)) &#123; addedge(last, v, w); addedge(v, last, w); &#125; else &#123; m++; addedge(last, m, 0); addedge(m, last, 0); last = m; addedge(m, v, w); addedge(v, m, w); &#125; &#125; for (auto cur : edge[u]) &#123; int v = cur.first; if (v == fa) continue; rebuild(v, u); &#125;&#125;namespace LCA &#123;int dep[N], st[N &lt;&lt; 1][LOG], dfn[N], Log[N &lt;&lt; 1], ind = 0;ll dis[N];void dfs(int u, int fa) &#123; st[dfn[u] = ++ind][0] = u; for (int i = head[u]; i; i = E[i].nxt) &#123; int v = E[i].v; if (v == fa) continue; dep[v] = dep[u] + 1; dis[v] = dis[u] + E[i].w; dfs(v, u); st[++ind][0] = u; &#125;&#125;int checkmin(int x, int y) &#123; return dep[x] &lt; dep[y] ? x : y;&#125;void ST() &#123; dfs(1, 0); for (int i = 2; i &lt;= ind; i++) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; for (int j = 1; j &lt; LOG; j++) &#123; for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= ind; i++) &#123; st[i][j] = checkmin(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]); &#125; &#125;&#125;int lca(int x, int y) &#123; x = dfn[x], y = dfn[y]; if (x &gt; y) swap(x, y); int k = Log[y - x + 1]; return checkmin(st[x][k], st[y - (1 &lt;&lt; k) + 1][k]);&#125;ll getdis(int x, int y) &#123; return dis[x] + dis[y] - dis[lca(x, y)] * 2;&#125;&#125;using LCA::getdis;namespace Tree_Devide &#123;struct Node &#123; int ch[3], id, siz; ll sum[2];&#125; s[N * LOG];int siz[N], F[N], dep[N], siz_all, rt, cnt = 0;int root[N];bool vis[N];vector&lt;int&gt; pre[N];void getroot(int u, int fa) &#123; siz[u] = 1; F[u] = 0; for (int i = head[u]; i; i = E[i].nxt) &#123; int v = E[i].v; if (v == fa || vis[v]) continue; getroot(v, u); siz[u] += siz[v]; F[u] = max(F[u], siz[v]); &#125; F[u] = max(F[u], siz_all - siz[u]); if (F[u] &lt; F[rt]) rt = u;&#125;void devide(int u) &#123; vis[u] = 1; s[u].id = u; for (int i = head[u]; i; i = E[i].nxt) &#123; int v = E[i].v; if (vis[v]) continue; F[rt = 0] = siz_all = siz[v]; getroot(v, 0); dep[rt] = dep[u] + 1; for (int j : pre[u]) &#123; pre[rt].push_back(j); &#125; for (int j = 0; j &lt; 3; j++) &#123; if (s[u].ch[j]) continue; s[u].ch[j] = rt; pre[rt].push_back(j); devide(rt); break; &#125; &#125;&#125;void insert(int &amp;t, int las, int u, int fa) &#123; t = ++cnt; s[t] = s[las]; s[t].siz++; s[t].sum[0] += getdis(s[t].id, u); if (fa) &#123; s[t].sum[1] += getdis(s[fa].id, u); &#125; if (s[t].id == u) return; insert(s[t].ch[pre[u][dep[s[t].id]]], s[las].ch[pre[u][dep[s[t].id]]], u, t);&#125;ll query(int t, int u) &#123; ll res = 0; for (int i = 0; i &lt; dep[u]; i++) &#123; int cur = s[t].ch[pre[u][i]]; res += (s[t].siz - s[cur].siz) * getdis(s[t].id, u) + s[t].sum[0] - s[cur].sum[1]; t = cur; &#125; res += s[t].sum[0]; return res;&#125;void build() &#123; F[rt = 0] = siz_all = cnt = m; getroot(1, 0); root[0] = rt; devide(rt); for (int i = 1; i &lt;= n; i++) &#123; insert(root[i], root[i - 1], a[i], 0); &#125;&#125;&#125;using Tree_Devide::root;using Tree_Devide::build;using Tree_Devide::insert;using Tree_Devide::query;int main() &#123; scanf("%d %d", &amp;n, &amp;q); m = n; for (int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;a[i]); &#125; for (int i = 1; i &lt; n; i++) &#123; int u, v, w; scanf("%d %d %d", &amp;u, &amp;v, &amp;w); edge[u].push_back(make_pair(v, w)); edge[v].push_back(make_pair(u, w)); &#125; rebuild(1, 0); LCA::ST(); build(); ll lastans = 0; while (q--) &#123; int op, l, r, u; scanf("%d", &amp;op); if (op == 1) &#123; scanf("%d %d %d", &amp;l, &amp;r, &amp;u); l ^= lastans; r ^= lastans; u ^= lastans; lastans = query(root[r], u) - query(root[l - 1], u); printf("%lld\n", lastans); lastans %= (1 &lt;&lt; 30); &#125; else &#123; scanf("%d", &amp;u); u ^= lastans; swap(a[u], a[u + 1]); insert(root[u], root[u - 1], a[u], 0); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>可持久化点分树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Min25 筛法]]></title>
    <url>%2Fblogs%2FMin25%2F</url>
    <content type="text"><![CDATA[Min25 筛法简介min25 筛法可以解决一类积性函数前缀和的问题 \sum_{i = 1} ^ n f(i)这样的函数需要满足两个个条件才可以用Min25筛法： 函数是积性函数 形如$f(x^k) [x是质数]$的函数值可以快速求出 算法我们先考虑算出所有质数的$f(x)$函数的和，也就是素数和减去素数个数 首先我们假设需要求出 \sum_{i = 1} ^ n f(i) [i是质数]即小于等于n的素数和 考虑函数$g(n,y)$表示小于等于n的所有数里面是质数或者最小质因子大于$pri_j$的数的和 那么最后需要求出的答案就是$g(n,Psiz)$ 考虑g函数怎么转移 当$pri_j^2&gt;n$的时候，显然不会有新的贡献，于是 g(n, j) = g(n, j - 1)否则的话我们把最小质因子是$pri_j$的贡献去掉 g(n, j) = g(n, j - 1) - f(pri_j)(g(\frac{n}{pri_j}, j - 1) - \sum_{i = 1} ^ {j - 1} f(pri_{i}))因为最小质因子小于$pri_j$的情况我们已经统计过了，所以需要把这些情况减掉我们可以发现这里的f需要满足是完全积性函数 我们现在算出来了所有质数的$f(x)$的和 那么就可以开始算$f(x)$的前缀和了 设$S(n, j)$表示小于等于n的数里面最小质因子大于等于$pri_j$的所有数的函数和 首先考虑所有质数的贡献 S(n, j) = g(n, Psiz) - \sum_{i = 1} ^ {j - 1} f(pri_i)然后枚举和数的最小质因子和其次幂来进行统计 S(n, j) += \sum_{i = j} ^ {Psiz} \sum_{e = 1} ^ {pri_i^{e + 1} \le n} f(pri_i^e)S(\frac{n}{pri_i^e}, i + 1) + f(pri_i^{e + 1})这样的算法复杂度是$\frac{n^{\frac{3}{4}}}{\log(n)}$ 一般来说可能比杜教快一点？ 适用范围比杜教大一些吧 挺好用的一个算法]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>Min25筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斯特林数什么的]]></title>
    <url>%2Fblogs%2F%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E4%BB%80%E4%B9%88%E7%9A%84%2F</url>
    <content type="text"><![CDATA[斯特林数什么的定义第一类strling数$\begin{bmatrix} n \\ m \end{bmatrix}$表示把$n$个数划分成$m$个环排列的方案数 递推式1 \begin{bmatrix} n \\ m \end{bmatrix} = \begin{bmatrix} n - 1 \\ m - 1 \end{bmatrix} + \begin{bmatrix} n - 1 \\ m \end{bmatrix} \ast (n - 1) 枚举最后一个点的位置 递推式2 \begin{bmatrix} n \\ m \end{bmatrix} = \sum_{i = 1} ^ n\begin{bmatrix} n - i \\ m - 1 \end{bmatrix} \ast (i - 1)! \ast \binom{n - 1}{i - 1} 枚举最后一个环排列的大小 第二类斯特林数$\begin{Bmatrix} n \\ m \end{Bmatrix}$表示把$n$个数划分成$m$个无序集合的方案数 递推式1 \begin{Bmatrix} n \\ m \end{Bmatrix} = \begin{Bmatrix} n - 1 \\ m - 1 \end{Bmatrix}+\begin{Bmatrix} n - 1\\ m \end{Bmatrix} \ast m 枚举最后一个点的位置 递推式2 \begin{Bmatrix} n \\ m \end{Bmatrix} = \sum_{i = 1}^n \begin{Bmatrix} n - i\\ m - 1 \end{Bmatrix}\ast \binom{n - 1}{i - 1} 枚举最后一个集合的大小 特殊表达形式 \begin{Bmatrix} n \\ m \end{Bmatrix}=\frac{1}{m!}\sum_{k = 0} ^ m (-1)^k \binom{m}{k}(m - k) ^n性质公式1（下降幂转次幂） x^{\underline{n}} = \sum_{k = 0} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix}x^k 证明如下： 比较简单，直接考虑怎么算出$x^k$项的系数就可以了，省略 公式2（次幂转下降幂） x^n = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} x ^ \underline{k}也可以转换成组合数和阶乘的形式 x^n = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} \binom{x}{k}k!公式3 \sum_{k=m}^n\begin{bmatrix} n \\ k \end{bmatrix}\begin{Bmatrix} k \\ m \end{Bmatrix}(-1)^{n - k} = [m = n] 证明如下： 将公式2代入公式1 得到： x^{\underline{n}} = \sum_{k = 0} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix}\sum_{m = 0} ^ k \begin{Bmatrix} k \\ m \end{Bmatrix} x ^ \underline{m}交换和号得： x^{\underline{n}} = \sum_{m = 0} ^ n x^{\underline{m}}\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}显然当$n = m$的时候$\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}$是1 所以有： 0 = \sum_{m = 0} ^ {n - 1} x^{\underline{m}}\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}因为对于任意的x上面的式子都成立，所以可以得到当$n\not= m$的时候$\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}$是0 公式4 \sum_{k=m}^n\begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix}(-1)^{k - m} = [m = n] 证明如下： 将公式1代入公式2 得到： x^{n} = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} \sum_{m = 0} ^ k (-1)^{k - m}\begin{bmatrix} k \\ m \end{bmatrix}x^m交换和号得： x^{n} = \sum_{m = 0} ^ n x^m\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}显然当$n = m​$的时候$\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}​$是1 所以有： 0 = \sum_{m = 0} ^ {n - 1} x^m\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}因为对于任意的x上面的式子都成立，所以可以得到当$n\not= m​$的时候$\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}​$是0 ps: 当然$(-1)^{k - m}$和$(-1)^{n - k}$没有任何区别 因为$n - m$是偶数的时候，没有影响 $n - m$是奇数的时候，相当于全体取负，不影响结论 公式5 \begin{bmatrix} n +1 \\ m + 1 \end{bmatrix} = \sum_{k = m} ^ n \begin{bmatrix} n \\ k \end{bmatrix}\binom{k}{m} 证明如下： 因为一个环排列对应着一个置换，然后一个置换又可以差分成很多的环排列，所以假设前$n$个数分成了$k$个环排列，并且这k个环排列中有$m$个不变，剩下的$k - m$个和新的环排列组合起来变成一个完整的环排列，也就是第$m+1$个环排列 公式6 \begin{Bmatrix} n +1 \\ m + 1 \end{Bmatrix} = \sum_{k = m} ^ n \binom{n}{k}\begin{Bmatrix} k \\ m \end{Bmatrix} 证明如下： 假设不和当前数在同一个集合里面的数是k个，所以这k个数会分成m个集合，然后再用组合数算一算和当前数在一个集合的数的方案数 公式7 \begin{bmatrix} n + 1\\ m + 1 \end{bmatrix} = \sum_{k = m} ^ n\begin{bmatrix} k\\ m \end{bmatrix}(\frac{n!}{k!}或n^{\underline{n - k}}) 其实就是第一类斯特林数的递推式2的化简版本，组合意义一模一样 公式8 \begin{Bmatrix} n + 1\\ m + 1 \end{Bmatrix} = \sum_{k = m} ^ n\begin{Bmatrix} k\\ m \end{Bmatrix}(m+1)^{n - k} 证明如下： 考虑第k+1个数是第一个被放进第m+1个集合中的数 所以前k个数会被放进m个集合中，并且还有$(m+1)^{n - k}$个数可以随便放 公式9（斯特林反演）对于： g(n) = \sum_{k = 0} ^ n(-1)^{n - k}\begin{bmatrix} n\\ k \end{bmatrix}f(k)有： f(n) = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} g(k)反之亦然 证明可以直接带入然后用公式3和公式4进行理解 简单运用第一类斯特林数求行方法假设需要求第一类斯特林数第n行 首先有： x^{\overline{n}} = \sum_{i = 0} ^ n \begin{bmatrix}n \\ i\end{bmatrix}x^i 就是下降幂换成上升幂，过程不变是是没有符号了，和公式1同理 那么也就是说$x^{\overline{n}}$是第n行斯特林数的生成函数 然后可以用$O(n\log^2 n)$的时间分治fft来算 也可以用$O(n\log n)$的倍增算法 f_{2n}(x) = x^{\overline{2n}} = f_n(x)f_n(x + n)然后$f_n(x+n)$实际上就是把$f_n(x)$的各项$x^k$换成$(x+n)^k$ 可以用二项式系数展开并且用$O(n\log n)$时间卷积求出 第二类斯特林数求行方法实际上就是第二类斯特林数的特殊表达形式 发现没有其实这是一个卷积： \begin{Bmatrix} n \\ m \end{Bmatrix}=\frac{1}{m!}\sum_{k = 0} ^ m (-1)^k \binom{m}{k}(m - k) ^n然后可以直接卷积算出来了]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归式的一般求解方法]]></title>
    <url>%2Fblogs%2F%E9%80%92%E5%BD%92%E5%BC%8F%E7%9A%84%E4%B8%80%E8%88%AC%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[递归式的一般求解方法对于一个通用的递归式模式 f(i)=a_i (1\le j < d); \\ f(dn+i)=cf(n)+\beta_i(0\le j < d, 1\le n)我们于是可以把$n$用$d$进制表示出来 n = (b_mb_{m-1}...b_{1}b_{0})_d然后把答案用$c$进制表示出来 f(n)=(a_{b_m}\beta_{b_{m - 1}}\beta_{b_{m - 2}}...\beta_{b_{1}}\beta_{b_{0}})_c即： f((b_mb_{m-1}...b_{1}b_{0})_d)=(a_{b_m}\beta_{b_{m - 1}}\beta_{b_{m - 2}}...\beta_{b_{1}}\beta_{b_{0}})_c或者，可以把独立的系数给拆开考虑，比如变成如下形式： f(n)=\alpha A(n)+\beta B(n)+\gamma C(n)+\delta D(n)+...然后根据f函数的特殊性质或者特殊的n来进行推导 参考笔记]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>递归式求解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多项式运算]]></title>
    <url>%2Fblogs%2F%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[多项式运算本文所讲所有的多项式运算全部基于vector的使用 1typedef vector&lt;int&gt; Poly; 0.思想自认为多项式最重要的思想就是倍增了 其次就是分治 建议先看看fft残疾人手册和ntt残疾人手册 1.多项式加法$C(n)=A(n)+B(n)$ 就是系数相加，非常简单的实现 123456Poly add(Poly a, Poly b) &#123; a.resize(max(a.size(), b.size())); for (size_t i = 0; i &lt; b.size(); i++) a[i] = add(a[i], b[i]); return a;&#125; 2.多项式减法$C(n)=A(n)-B(n)$ 系数相减，依旧简单的实现 123456Poly sub(Poly a, Poly b) &#123; a.resize(max(a.size(), b.size())); for (size_t i = 0; i &lt; b.size(); i++) a[i] = sub(a[i], b[i]); return a;&#125; 3.多项式乘法$C(n)=\sum_{i=0}^nA(i)B(n-i)$ 就是ntt 需要预处理原根的次幂 交换位置的时候动态处理就好，因为在倍增过程中ntt的长度不一样 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152int w[2][N];void init() &#123; for (int i = 1; i &lt; (1 &lt;&lt; 18); i &lt;&lt;= 1) &#123; w[1][i] = w[0][i] = 1; int wn; wn = fast_pow(G, (Mod - 1) / (i &lt;&lt; 1)); for (int j = 1; j &lt; i; j++) w[1][i + j] = mul(wn, w[1][i + j - 1]); wn = fast_pow(G, Mod - 1 - (Mod - 1) / (i &lt;&lt; 1)); for (int j = 1; j &lt; i; j++) w[0][i + j] = mul(wn, w[0][i + j - 1]); &#125;&#125;void transform(int *t, int len, int typ) &#123; for (int i = 0, j = 0, k; j &lt; len; j++) &#123; if (j &gt; i) swap(t[i], t[j]); for (k = (len &gt;&gt; 1); k &amp; i; k &gt;&gt;= 1) i ^= k; i ^= k; &#125; for (int i = 1; i &lt; len; i &lt;&lt;= 1) &#123; for (int j = 0; j &lt; len; j += (i &lt;&lt; 1)) &#123; for (int k = 0; k &lt; i; k++) &#123; int x = t[j + k], y = mul(t[j + k + i], w[typ][i + k]); t[j + k] = add(x, y); t[j + k + i] = sub(x, y); &#125; &#125; &#125; if (typ) return; int inv = fast_pow(len, Mod - 2); for (int i = 0; i &lt; len; i++) t[i] = mul(t[i], inv);&#125;Poly mul(const Poly &amp;a, const Poly &amp;b) &#123; int len = a.size() + b.size() + 1; len = 1 &lt;&lt; (int) ceil(log2(len)); static Poly prea, preb; prea = a; preb = b; prea.resize(len); preb.resize(len); transform(&amp;prea[0], len, 1); transform(&amp;preb[0], len, 1); for (int i = 0; i &lt; len; i++) prea[i] = mul(prea[i], preb[i]); transform(&amp;prea[0], len, 0); clean(prea); return prea;&#125; 4.多项式求逆对于多项式$A$，我们要求出$B$ 满足$A\ast B=1(\mod x^{n+1})$ 这里的$\mod x^n$是保留前$n+1$个系数的意思，不然$B(n)$会有无穷项 我们假设已经求出了$B’$满足$A\ast B’=1(\mod x^{\lceil\frac{n}{2}\rceil})$ 那么因为存在$A\ast B=1(\mod x^{\lceil\frac{n}{2}\rceil})$ 所以$A\ast (B-B’)=0(\mod x^{\lceil\frac{n}{2}\rceil})$ 又因为A不是0，所以$(B-B’)=0(\mod x^{\lceil\frac{n}{2}\rceil})$ 两边同时平方（模数也要平方） $B^2-2\ast B\ast B’+B’^2=0(\mod x^n)$ 因为有个$B^2$不好计算，所以把等式两边同时乘上$A$ 得到$B-2\ast B’+A\ast B’^2=0(\mod x^n)$ 即$B=2\ast B’-A\ast B’^2(\mod x^n)$ 这样就可以递归求解了 1234567891011121314151617181920Poly inv(Poly a, int n) &#123; if (n == 1) return Poly(1, fast_pow(a[0], Mod - 2)); int len = 1 &lt;&lt; ((int) ceil(log2(n)) + 1); Poly x = inv(a, (n + 1) &gt;&gt; 1), y; x.resize(len); y.resize(len); for (int i = 0; i &lt; n; i++) y[i] = a[i]; transform(&amp;x[0], len, 1); transform(&amp;y[0], len, 1); for (int i = 0; i &lt; len; i++) x[i] = mul(x[i], sub(2, mul(x[i], y[i]))); transform(&amp;x[0], len, 0); x.resize(n); return x;&#125;Poly inv(Poly a) &#123; return inv(a, a.size());&#125; 5.多项式除法对于n次多项式$A$和m次多项式$B$，构造出小于n-m次多项式$C$和小于m次的多项式$D$ 满足$A=B*C+D$ 我们考虑一下多项式$A$的系数反转形式记做$RevA$ 所以$RevA(x)=x^nA(\frac{1}{x})$ 我们把原来的式子左右同时乘上$x^n$ 得到$A(\frac{1}{x})\ast x^n=B(\frac{1}{x})\ast C(\frac{1}{x})\ast x^n+D(\frac{1}{x})\ast x^n$ 所以$RevA(x)=RevB(x)\ast RevC(x)+x^{n-m+1}RevD(x)$ 在$\mod x^{n-m+1}$的意义下发现$RevD$就没了，然而并不影响$RevA,RevB,RevC$ 所以我们只需要求出$RevB$在$\mod x^{n-m+1}$意义下的逆元，然后就可以算出$RevC$和$RevD$ 1234567891011121314151617Poly rev(Poly a) &#123; clean(a); reverse(a.begin(), a.end()); return a;&#125;void div(Poly a, Poly b, Poly &amp;c, Poly &amp;d) &#123; int n = a.size(), m = b.size(); Poly ra = rev(a), rb = rev(b); ra.resize(n - m + 1); rb.resize(n - m + 1); c = mul(ra, inv(rb)); c.resize(n - m + 1); c = rev(c); d = sub(a, mul(b, c)); clean(c), clean(d);&#125; 6.多项式求导因为多项式的形式很简单，所以求导直接可以模拟出来 1234567Poly deri(Poly a) &#123; int n = a.size(); for (int i = 1; i &lt; n; i++) a[i - 1] = mul(a[i], i); a.resize(n - 1); return a;&#125; 7.多项式积分积分也直接模拟吧。。 12345678Poly inte(Poly a) &#123; int n = a.size(); a.resize(n + 1); for (int i = n; i &gt;= 1; i--) a[i] = mul(a[i - 1], fast_pow(i, Mod - 2)); a[0] = 0; return a;&#125; 8.多项式对数函数对于n次多项式$A$我们需要求出n次多项式$B$满足$B=\ln(A)$ 两边同时求导 $B’=\frac{A’}{A}$ 所以把$A$的导和逆乘起来然后积分回去就可以了。。 123456Poly ln(Poly a) &#123; int len = a.size(); a = inte(mul(deri(a), inv(a))); a.resize(len); return a;&#125; 9.多项式指数函数对于n次多项式$A$我们需要求出来n次多项式$B$满足$B=e^A$ 所以$\ln(B)=A $ 然后我们构造一个函数$F(B)=\ln(B)-A$ 我们要求函数$F(A)=0$的时候的解 根据泰勒展开和牛顿迭代： $f(x)=f(x_0)+f’(x_0)(x-x_0)$ 我们可以得到迭代公式：$x=x_0-\frac{f(x_0)}{f’(x_0)}$ 对应到求exp上面来：$B=B_0-\frac{F(B_0)}{F’(B_0)}$ 展开得到：$B=B_0-\frac{\ln(B_0)-A}{\frac{1}{B_0}}=B_0(1-\ln(B_0)+A)$ 然后就可以根据上面的这个式子进行倍增，因为每一次计算长度会变成原来的两倍 12345678910111213141516Poly exp(Poly a, int n) &#123; if (n == 1) return Poly(1, 1); Poly x = exp(a, (n + 1) &gt;&gt; 1), y; x.resize(n); y = ln(x); for (int i = 0; i &lt; n; i++) y[i] = sub(a[i], y[i]); y[0]++; x = mul(x, y); x.resize(n); return x;&#125;Poly exp(Poly a) &#123; return exp(a, a.size());&#125; 10.多项式开根给定n次多项式$A$，求$B$满足$B^2=A(\mod x^{n+1})$ 和求exp的思路比较类似，同样用到了牛顿迭代法 构造函数$F(B)=B^2-A$，求$F(B)=0$的解 带入迭代公式：$x=x_0-\frac{f(x_0)}{f’(x_0)}$ 得到$B=B_0-\frac{B_0^2-A}{2B_0}=\frac{B_0^2+A}{2B_0}=\frac{1}{2}\ast (B_0+\frac{A}{B_0})$ 依旧是倍增进行求解 123456789101112131415161718Poly sqrt(Poly a, int n) &#123; if (n == 1) return Poly(1, 1); Poly x = sqrt(a, (n + 1) &gt;&gt; 1), y; x.resize(n); y.resize(n); for (int i = 0; i &lt; n; i++) y[i] = a[i]; x = add(mul(inv(x), y), x); int inv2 = fast_pow(2, Mod - 2); for (int i = 0; i &lt; n; i++) x[i] = mul(x[i], inv2); x.resize(n); return x;&#125;Poly sqrt(Poly a) &#123; return sqrt(a, a.size());&#125;]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[莫比乌斯反演和杜教筛]]></title>
    <url>%2Fblogs%2F%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E5%92%8C%E6%9D%9C%E6%95%99%E7%AD%9B%2F</url>
    <content type="text"><![CDATA[莫比乌斯反演和杜教筛0.数论函数数论函数是莫比乌斯反演和杜教筛的前置知识 0.定义 数论函数：定义域是正整数的函数 积性函数：对于任意两个互质的正整数$a,b$，满足$f(ab)=f(a)f(b)$的函数 完全积性函数：对于任意两个正整数$a,b$，满足$f(ab)=f(a)f(b)$的函数 1.常见积性函数1.单位函数非常简单的定义：$e(n)=[n=1]$ 2.常函数也很简单的定义：$1(n)=1$ 3.恒等函数依旧简单的定义：$id(n)=n$ 4.莫比乌斯函数莫比乌斯函数$\mu(n)$，当n有平凡因子的时候值是$0$，否则就是$(-1)^{质因子个数}$，即： \mu(n)=\begin{cases} 1\ (n=1) \\ -1^k\ (n有k个质因子且没有平方因子) \\ 0\ (n有平方因子) \end{cases}莫比乌斯函数的性质： \sum_{i|n}\mu(i)=[n=1]5.欧拉函数欧拉函数$\phi(n)$的定义是$[1,n]$中和n互质的数的个数 假设集合$P$包含了所有n的质因子，那么有： \phi(i)=n\prod_{p\in P}\frac{p-1}{p}欧拉函数的性质： \sum_{i|n}\phi(i)=n 若n\not=1,\sum_{i=1}^ni[(i,n)=1]=\frac{n\phi(n)}{2}(i)2.Dirichlet卷积对于两个数论函数$f(n),g(n)$，定义Dirichlet卷积为： (f*g)(n)=\sum_{d|n}f(d)g(\frac{n}{d})并且Dirichlet卷积满足交换律、结合律和分配率，即： f*g=g*f \\ f*(g*h)=(f*g)*h \\ f*(g+h)=f*g+f*h由Dirichlet卷积我们可以推导出： 如果函数$f,g$都是积性函数，那么$f*g$也是积性函数 如果我们无法快速（在$n\log(n)$以内）求出$f\ast g$ 那么我们就可以用$O(n\log((n))$的时间求出我们想要的$f\ast g $ 可以这样处理： 123456789101112typedef vector&lt;int&gt; Poly;Poly Dirichlet(Poly f, Poly g) &#123; int len = f.size(); Poly h(len); for (int i = 1; i * i &lt; len; i++) &#123; for (int j = i; j * i &lt; len; j++) &#123; if (i == j) h[i * j] += f[i] * g[j]; else h[i * j] += f[i] * g[j] + f[j] * g[i]; &#125; &#125; return h;&#125; 1.莫比乌斯反演1.莫比乌斯恒等式如果两个函数$f, g $，满足 f(n)=\sum_{d|n}g(d)那么有： g(n)=\sum_{d|n}f(d)\mu(\frac{n}{d})也可以表示成： g(n)=\sum_{n|d}f(d)\mu(\frac{d}{n})但是后面这种形式应该不太常用 证明很简单，我们其实就是要证明： $f=g\ast1$和$g=f \ast\mu$是等价的 证明其实很简单，第一个式子两边同时卷上$\mu$或者第二个式子两边同时卷上$1$ 2.使用技巧注意在Mobius反演的时候有几种常用技巧： 交换和号 根号分块（下底函数分块） 添加性质良好便于计算的积性函数 2.杜教筛杜教筛，很方便，但是有其局限性 一般情况是我们需要计算一个积性函数$f$的前缀和： Sum(n)=\sum_{i=1}^nf(i)于是我们可以构造一个有良好特殊性质的积性函数$g$，使得$f\ast g$可以快速算出并具有一定性质 然后我们可以快速算出： \sum_{i=1}^n\sum_{d|i}g(d)f(\frac{i}{d})把上面的式子交换一下和号得到： \sum_{d=1}^n g(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}f(i)就变成了： \sum_{d=1}^n g(d)Sum(\lfloor\frac{n}{d}\rfloor)也就是说： Sum(n)+\sum_{d=2}^n g(d)Sum(\lfloor\frac{n}{d}\rfloor)=\sum_{i=1}^n\sum_{d|i}g(d)f(\frac{i}{d})所以： Sum(n)=\sum_{i=1}^n\sum_{d|i}g(d)f(\frac{i}{d})-\sum_{d=2}^n g(d)Sum(\lfloor\frac{n}{d}\rfloor)我们发现上面的这个式子右边的部分，一个可以快速计算，一个可以根号分块递归成子问题 注意我们需要用线性筛预处理一部分前缀和大概$O(n^{\frac{2}{3}})$个，这样时间效率是$O(n^{\frac{2}{3}})$的 常数比较大，主要是需要map来对ll值和前缀和进行映射 例题：题目大意：定义神树集是一个二维平面上的点集，使得存在至少一条直线恰好经过两个点 求$x\in[0,n],y\in[0,n]$的神树集个数$\mod 12345678$ 思路：首先有一个结论：只有点数小于2或者所有点共线的点集不是神树集 那我们就把这一部分答案容斥掉就可以了 首先我们可以枚举两个端点的横纵坐标差然后进行统计（这里没有统计平行坐标轴的） sum=2*[\sum_{x=1}^n\sum_{y=1}^n2^{(x,y)-1}(n+1-x)(n+1-y)]其中$(n+1-x)(n+1-y)$是可以选择的左边端点的数量 然后我们枚举gcd sum=\sum_{g=1}^n2^g\sum_{x=1}^{\lfloor\frac{n}{g}\rfloor}\sum_{y=1}^{\lfloor\frac{n}{g}\rfloor}(n-1-gx)(n+1-gy)[(x,y)=1]然后把后面拆开按照g的次数分类 变成了 sum=\sum_{g=1}^n(n+1)^2(2^g)F(\frac{n}{g})+(n+1)(2^gg)G(\frac{n}{g})+(2^gg^2)H(\frac{n}{g})其中 F(n)=\sum_{x=1}^n\sum_{y=1}^n[(x,y)=1]=[2\sum_{i = 1}^n\phi(i)]-1 G(n)=\sum_{x=1}^n\sum_{y=1}^n(x+y)[(x,y)=1]因为我们有： \sum_{i=1}^ni[(i,n)=1]=\frac{n\phi(n)}{2} (n!=1)所以可以对$G(n)$进行化简，把x和y的贡献分别来看，得到： G(n)=[3\sum_{i=1}^ni\phi(i)]-1同理，我们也可以对$H(n)$进行化简 H(n)=\sum_{i=1}^ni^2\phi(i)至于有关$i=1$的细节问题，请自行自习思考 然后发现$\sum_{i=1}^n\phi(i),\sum_{i=1}^ni\phi(i),\sum_{i=1}^ni^2\phi(i) $都是可以用杜教筛算出来的 然后$\sum_{i=1}^n 2^i, \sum_{i=1}^n 2^ii,\sum_{i=1}^n 2^i i^2$都是可以用做差法在$O(\log n)/O(1)$的时间内算出来的 到这里我们已经完成了一大部分 剩下的就是对还没有讨论的情况进行分析 首先因为我们要算的是不合法情况，所以应该去掉被包含合法的两个点的个数 因此我们需要算出不和坐标轴平行的两个点点集的个数 所有点对个数是$\frac{(n+1)^2((n+1)^2-1)}{2}$，去掉与坐标轴平行的个数是$2(n+1)\frac{(n+1)n}{2}=(n+1)^2n$ 其次因为在与坐标轴平行的情况中，点数大于2的情况我们没有减去 这一部分的情况实际上我们只用考虑$2(n+1)$个单独的行就可以了 对于每一行我们用所有的方案数减去小于3的方案数 就是$2^{n+1}-\frac{n(n+1)}{2}-(n+1)-1$ 最后是所有方案数中点数小于2的也不合法，一共有$(n+1)^2+1$种 然后就直接用总的方案数$2^{(n+1)^2}$种减去不合法的就可以了 注意一下$2^{(n+1)^2}$快速幂的时候指数不能直接取mod 并且还有一堆恶心的地方需要分类讨论，因为模数真的很奇葩 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const ll N = 5e6 + 10;const ll Mod = 12345678;ll add(ll a, ll b) &#123; return (a + b) % Mod;&#125;ll sub(ll a, ll b) &#123; return ((a - b) % Mod + Mod) % Mod;&#125;ll mul(ll a, ll b) &#123; if (a &gt; Mod) a %= Mod; if (b &gt; Mod) b %= Mod; return a * b % Mod;&#125;ll fast_pow(ll a, ll b) &#123; ll res = 1; for (; b; b &gt;&gt;= 1, a = mul(a, a)) if (b &amp; 1) res = mul(res, a); return res;&#125;struct Node &#123; ll f, g, h;&#125; sum[N];map&lt;ll, Node&gt; mp;ll n, tot, pri[N], phi[N];bool vis[N];void getprime() &#123; ll limit = min(n, N - 1); phi[1] = 1; for (ll i = 2; i &lt;= limit; i++) &#123; if (!vis[i]) &#123; phi[i] = i - 1; pri[++tot] = i; &#125; for (ll j = 1; j &lt;= tot &amp;&amp; pri[j] * i &lt;= limit; j++) &#123; vis[i * pri[j]] = 1; if (i % pri[j] == 0) &#123; phi[i * pri[j]] = phi[i] * pri[j]; break; &#125; else &#123; phi[i * pri[j]] = phi[i] * (pri[j] - 1); &#125; &#125; &#125; for (ll i = 1; i &lt; N; i++) &#123; sum[i].f = add(sum[i - 1].f, phi[i]); sum[i].g = add(sum[i - 1].g, mul(i, phi[i])); sum[i].h = add(sum[i - 1].h, mul(mul(i, i), phi[i])); &#125;&#125;ll geta(ll x) &#123; if (x &amp; 1) &#123; return mul(x, (x + 1) / 2); &#125; else &#123; return mul(x / 2, x + 1); &#125; &#125;ll getb(ll x) &#123; if (x % 6 == 0) &#123; return mul(x / 6, mul(x + 1, 2 * x + 1)); &#125; else if (x % 6 == 1) &#123; return mul(x, mul((x + 1) / 2, (2 * x + 1) / 3)); &#125; else if (x % 6 == 2) &#123; return mul(x / 2, mul((x + 1) / 3, 2 * x + 1)); &#125; else if (x % 6 == 3) &#123; return mul(x / 3, mul((x + 1) / 2, 2 * x + 1)); &#125; else if (x % 6 == 4) &#123; return mul(x / 2, mul(x + 1, (2 * x + 1) / 3)); &#125; else &#123; return mul(x, mul((x + 1) / 6, 2 * x + 1)); &#125;&#125;Node solve(ll x) &#123; if (x &lt; N) return sum[x]; if (mp.count(x)) return mp[x]; ll pref = geta(x), preg = getb(x), preh = mul(pref, pref); for (ll i = 2; i &lt;= x; i++) &#123; ll j = x / (x / i); Node cur = solve(x / i); pref = sub(pref, mul(j - i + 1, cur.f)); preg = sub(preg, mul(sub(geta(j), geta(i - 1)), cur.g)); preh = sub(preh, mul(sub(getb(j), getb(i - 1)), cur.h)); i = j; &#125; return mp[x] = (Node) &#123;pref, preg, preh&#125;;&#125;ll calcf(ll x) &#123; return fast_pow(2, x + 1);&#125;ll calcf(ll l, ll r) &#123; return sub(calcf(r), calcf(l - 1));&#125;ll calcg(ll x) &#123; return mul(x - 1, calcf(x)); &#125;ll calcg(ll l, ll r) &#123; return sub(calcg(r), calcg(l - 1));&#125;ll calch(ll x) &#123; return add(sub(mul(mul(x, x), calcf(x)), 2 * calcg(x)), calcf(x));&#125;ll calch(ll l, ll r) &#123; return sub(calch(r), calch(l - 1));&#125; main() &#123; scanf("%lld", &amp;n); getprime(); ll resf = 0, resg = 0, resh = 0; for (ll i = 1; i &lt;= n; i++) &#123; ll j = n / (n / i); Node cur = solve(n / i); resf = add(resf, mul(calcf(i, j), 2 * cur.f - 1)); resg = add(resg, mul(calcg(i, j), 3 * cur.g - 1)); resh = add(resh, mul(calch(i, j), cur.h)); i = j; &#125; ll ans = add(sub(mul(mul(n + 1, n + 1), resf), mul(n + 1, resg)), resh); ans = sub(ans, mul(mul(n + 1, n + 2), geta(n))); ans = add(ans, mul(mul(n + 1, n + 1), n)); ans = add(ans, mul(n * 2 + 2, sub(fast_pow(2, n + 1), add(n + 2, geta(n))))); ans = sub(sub(fast_pow(fast_pow(2, n + 1), n + 1), mul(n + 1, n + 1) + 1), ans); //指数不能直接取模 printf("%lld", ans); return 0;&#125;]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
        <tag>杜教筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NTT残疾人手册]]></title>
    <url>%2Fblogs%2F%E5%A4%9A%E9%A1%B9%E5%BC%8F-NTT%20%E6%AE%8B%E7%96%BE%E4%BA%BA%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[NTT残疾人手册建议先阅读FFT的残疾人手册 0.简介首先fft的计算方式是在实数域下进行运算的 所以难免会有精度误差，但是如果我们需要在模的意义下快速求多项式的卷积FFT就失灵了 因此NTT就出现了 1.原根的介绍关于单位根的性质回顾我们需要一个在模意义下成立的具有单位根性质的东西 那么单位根的性质我们用到了哪一些呢？ \omega_n^0\not= \omega_n^1\not= \cdots\not= \omega_n^{n-1} \omega_{n}^k=\omega_{\frac{n}{2}}^{\frac{k}{2}} \omega_{n}^k=\omega_{n}^{k \% n} \omega_{n}^{k+\frac{n}{2}}=-\omega_{n}^k \sum_{k=0}^{n-1} (\omega_n^{j-i})^k = n[i=j]原根概念的引入模数Mod的原根g的定义是需要满足： g^0\not= g^1\not= \cdots\not= g^{p-2} \pmod {Mod}而模数Mod定要满足是质数且可以表示成$Mod = k\cdot2^r+1$的形式 在这种情况下令$g_n=g^k\pmod {Mod}$ 就可以使得： g_n^0\not= g_n^1\not= \cdots\not= g_n^{n-1} \pmod {Mod}这样的话，我们就可以用原根来代替单位根进行模意义下的快速变换了 主要过程和fft没有本质区别]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FFT残疾人手册]]></title>
    <url>%2Fblogs%2F%E5%A4%9A%E9%A1%B9%E5%BC%8F-FFT%20%E6%AE%8B%E7%96%BE%E4%BA%BA%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[FFT残疾人手册0.简介FFT/NTT可以把本来复杂度是$\mathcal O(n^2)$的多项式乘法优化成$\mathcal O(n\log n)$的复杂度 在比较高等级的比赛中会用吧 在电脑上存一个板子也挺方便的 1.点值表示法一个$n$次多项式 A(x)=\sum_{i=0}^{n-1}a_ix^i的点值表示法为 其实就是把$x_0,x_1,…,x_{n-1}$代入$A(x)$中得到的$y_0,y_1,…,y_{n-1}$ 一个大小为$n$点值表示法可以唯一确定一个$n$次多项式 因为点值表示法实际上就是n个方程 A(x_0)=y_0 \\ A(x_1)=y_1 \\ ... \\ A(x_{n-1})=y_{n-1}这样是可以唯一确定系数集合$a_0,a_1,…,a_{n-1}$的 2.算法的主要思想我们把多项式$A(x),B(x)$在$x_0,x_1,…,x_{2n-2}$处的点值分别求出来，得到 \\ 把这些点值乘起来变成 就可以还原成多项式$A(x)*B(x)$ 3.前置知识：单位根给没有复数基础知识的OIer普及一下：$i=\sqrt{-1}$，是一个常数 然后形如$cos(\theta)+i\cdot sin(\theta)$的复数有一个很好的性质 $(cos(\theta)+i\cdot sin(\theta))^k=cos(k\theta)+i\cdot sin(k\theta)$ 这个东西可以用数学归纳法暴力展开证明 n次单位根是形如$cos(\frac{2\pi k}{n})+i\cdot sin(\frac{2\pi k}{n})$的复数 我们记$\omega_{n}=cos(\frac{2\pi}{n})+i\cdot sin(\frac{2\pi}{n})$ 然后有$\omega_n^k=cos(\frac{2\pi k}{n})+i\cdot sin(\frac{2\pi k}{n})$ 所以说n次单位根其实就是把单位元分成了n等份 根据这个性质很容易得到 \omega_{n}^k=\omega_{\frac{n}{2}}^{\frac{k}{2}}也就是说存在： (\omega_n^k)^2=\omega_{\frac{n}{2}}^k根据三角函数的周期性可以得到一个式子： \omega_n^k=cos(\frac{2\pi ki}{n})+i\cdot sin(\frac{2\pi k}{n})=cos(\frac{2\pi(k\%n)}{n})+i\cdot sin(\frac{2\pi(k\%n)}{n})=\omega_n^{k\%n}结合$(7)(8)$可以得到： (\omega_n^k)^2=(\omega_n^{k+\frac{n}{2}})^2=\omega_{\frac{n}{2}}^{k}还有一个很好的性质： \omega_n^{\frac{n}{2}+k}=\omega_n^k \cdot \omega_n^{\frac{n}{2}}= \omega_n^k \cdot e^{\frac{2\pi i}{n}\cdot\frac{n}{2}} = \omega_n^k\cdot e^{\pi i} = - \omega_n^k第$(9)$和$(10)$个式子都是我们要用到重要性质 4.DFT过程及其优化DFT就是所谓的离散傅里叶变换（Discrete Fourier Transform, DFT） 因为朴素的多项式转化成点值的复杂度是$n^2$的，很慢 所以考虑怎么把这个东西优化下来 首先DFT的优化用到了分治的思想 根据第$(9)$个式子，我们来猜想一些性质 多项式： A(x)=\sum_{i=0}^{n-1}a_ix^i把A的所有项按照x指数的奇偶性来分类变成 A(x)=(a_0x^0+a_2x^2+a_4x^4...)+(a_1x^1+a_3x^3+a_5x^5...)令： F(x)=a_0x^0+a_2x^1+a_4x^2... \\ G(x)=a_1x^0+a_3x^1+a_5x^2...所以有： A(x)=F(x^2)+xG(x^2)那么$A(x)$就变成了$F(x)$在$x^2$处的点值和$G(x)$在$x^2$处的点值和x的积之和 在取x集合的时候令： x_0=\omega_{n}^0 \\ x_1=\omega_{n}^1 \\ ... \\ x_{n-1}=\omega_{n}^{n-1}就可以得到： A(\omega_{n}^k)=F(\omega_{\frac{n}{2}}^k)+\omega_{n}^kG(\omega_{\frac{n}{2}}^k) \\ A(\omega_{n}^{k+\frac{n}{2}})=F(\omega_{\frac{n}{2}}^k)-\omega_{n}^kG(\omega_{\frac{n}{2}}^k)这样的话我们只需要计算出$F(x)$和$G(x)$的值就可以算出多项式$A(x)$的点值了 而因为每次我们递归的时候都会缩小一半的计算范围，只不过需要预先把n补到2的次幂 所以这样的时间复杂度是： \mathcal T(n) = 2\mathcal T(\frac{n}{2})+\mathcal O(n) = \mathcal O(n\log n)5.IDFT过程及其优化我们做完了DFT，现在需要用点值还原出多项式 也就是说要从这个有n个等式的线性方程组： \begin{equation*} \left\{ \begin{array}{ccccccccc} a_0(\omega_n^0)^{0}&+&\cdots&+&a_{n-2}(\omega_n^0)^{n-2}&+&+a_{n-1}(\omega_n^0)^{n-1}&=&A(\omega_n^0) \\ a_0(\omega_n^1)^{0}&+&\cdots&+&a_{n-2}(\omega_n^1)^{n-2}&+&+a_{n-1}(\omega_n^1)^{n-1}&=&A(\omega_n^1) \\ \vdots & & \vdots & &\vdots& & \vdots & & \vdots\\ a_0(\omega_n^{n-1})^{0}&+&\cdots&+&a_{n-2}(\omega_n^{n-1})^{n-2}&+&+a_{n-1}(\omega_n^{n-1})^{n-1}&=&A(\omega_n^{n-1}) \end{array} \right. \end{equation*}解出$a_0,a_1,…a_{n-1}$的值。 我们把上面的线性方程组写成矩阵形式，发现是： \begin{equation} \label{IDFT-equation} \begin{bmatrix} (\omega_n^0)^0 & (\omega_n^0)^1 & \cdots & (\omega_n^0)^{n-1} \\ (\omega_n^1)^0 & (\omega_n^1)^1 & \cdots & (\omega_n^1)^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{n-1})^0 & (\omega_n^{n-1})^1 & \cdots & (\omega_n^{n-1})^{n-1} \end{bmatrix} \begin{bmatrix} a_0 \\ a_1 \\ \vdots \\ a_{n-1} \end{bmatrix} = \begin{bmatrix} A(\omega_n^0) \\ A(\omega_n^1) \\ \vdots \\ A(\omega_n^{n-1}) \end{bmatrix} \end{equation}也就是说我们要求出矩阵 P=\begin{bmatrix} (\omega_n^0)^0 & (\omega_n^0)^1 & \cdots & (\omega_n^0)^{n-1} \\ (\omega_n^1)^0 & (\omega_n^1)^1 & \cdots & (\omega_n^1)^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{n-1})^0 & (\omega_n^{n-1})^1 & \cdots & (\omega_n^{n-1})^{n-1} \end{bmatrix}的逆矩阵$P’$。 在这里直接给出逆矩阵$P’$并证明一定成立 P'=\frac{1}{n}\left[\begin{matrix} (\omega_n^{-0})^0 & (\omega_n^{-0})^1 & \cdots & (\omega_n^{-0})^{n-1} \\(\omega_n^{-1})^0 & (\omega_n^{-1})^1 & \cdots & (\omega_n^{-1})^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{-(n-1)})^0 &(\omega_n^{-(n-1)})^1 & \cdots & (\omega_n^{-(n-1)})^{n-1} \\\end{matrix}\right]那么对于矩阵$Q=PP’$，有$Q_{i,j}=\sum_{k=0}^{n-1}P_{i,k}\cdot P’_{k,j}$ 即$Q_{i,j}=\sum_{k=0}^{n-1}\frac{1}{n}\omega_n^{-ik}\cdot \omega_n^{kj}=\frac{1}{n}\sum_{k=0}^{n-1}(\omega_n^{j-i})^k $ $i\not=j$：$Q_{i,j}=\frac{1}{n}\sum_{k=0}^{n-1}(\omega_n^{i-j})^k=\frac{1}{n}\cdot \frac{(\omega_n^{i-j})^n-1}{\omega_n^{i-j}-1}$ 因为公式$(8)$，可以得到$(\omega_n^{i-j})^n=1$，所以$Q_{i,j}=0$ $i=j$：$Q_{i,j}=1$ 所以$P​$和$P’​$互为逆矩阵 也就是说现在要做的就是求出$P’$和点值矩阵的乘积，即： \frac{1}{n}\left[\begin{matrix} (\omega_n^{-0})^0 & (\omega_n^{-0})^1 & \cdots & (\omega_n^{-0})^{n-1} \\(\omega_n^{-1})^0 & (\omega_n^{-1})^1 & \cdots & (\omega_n^{-1})^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{-(n-1)})^0 &(\omega_n^{-(n-1)})^1 & \cdots & (\omega_n^{-(n-1)})^{n-1} \\\end{matrix}\right] \begin{bmatrix} A(\omega_n^0) \\ A(\omega_n^1) \\ \vdots \\ A(\omega_n^{n-1}) \end{bmatrix}再来观察一下原来的DFT过程中我们做的事，就是求出了 \left[\begin{matrix} (\omega_n^{0})^0 & (\omega_n^{0})^1 & \cdots & (\omega_n^{0})^{n-1} \\(\omega_n^{1})^0 & (\omega_n^{1})^1 & \cdots & (\omega_n^{1})^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{(n-1)})^0 &(\omega_n^{(n-1)})^1 & \cdots & (\omega_n^{(n-1)})^{n-1} \\\end{matrix}\right] \begin{bmatrix} a(\omega_n^0) \\ a(\omega_n^1) \\ \vdots \\ a(\omega_n^{n-1}) \end{bmatrix}那这个时候我们只需要把$A(\omega_n^0) ,A(\omega_n^1) ,\dots,A(\omega_n^{n-1})$当作点值，并且把DFT过程中的$\omega_n^{k}$替换成$\omega_n^{-k}$就可以了 6.FFT的递归实现dd只要理解了最初的迭代过程应该就问题不大了 就是简单的模拟出分治过程 omiga数组最好是可以预处理出来，但是这样的实现方式依旧有很大的常数 123456789101112void fft(int n, Complex *p, int pos, int step, Complex *omg) &#123; if(n == 1) return; int m = n &gt;&gt; 1; fft(m, p, pos, step &lt;&lt; 1, omg); fft(m, p, pos + step, step &lt;&lt; 1, omg); for(int k = 0; k &lt; m; k++) &#123; int cur = 2 * step * k; tmp[k] = p[cur + pos] + omg[k * step] * p[cur + pos + step]; tmp[k + m] = p[cur + pos] - omg[k * step] * p[cur + pos + step]; &#125; for(int i = 0; i &lt; n; i++) p[i * step + pos] = tmp[i];&#125; 7.FFT的迭代实现我们考虑每一次的分组递归 第一次显然是按照最后一个二进制位的奇偶性来分组的 进入下一层迭代后就发现变成了一个$\frac{n}{2}$次多项式，可以看做所有的指数都除以了2，参考$(14)$ 所以最后一位就没有意义了，下一次排序就是按照倒数第二位的奇偶性来进行分组的 发现本质就是把二进制反转进行交换，很奇妙的 可以这样预处理： 123for (int i = 0; i &lt; n; i++) &#123; rev[i] = (rev[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (lim - 1));&#125; 所以就可以用迭代来进行运算啦 12345678910111213void transform(Complex f[N], Complex w[N]) &#123; for (int i = 0; i &lt; p; i++) if (i &lt; rev[i]) swap(f[i], f[rev[i]]); for (int len = 1; len &lt; p; len &lt;&lt;= 1) &#123; int step = (len &lt;&lt; 1); for (Complex *cur = f; cur != f + p; cur += step) &#123; for (int i = 0; i &lt; len; i++) &#123; Complex t = w[p / step * i] * cur[i + len]; cur[i + len] = cur[i] - t; cur[i] += t; &#125; &#125; &#125;&#125; 8.板子总的板子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;using namespace std;const double PI = acos(-1.0);const int N = 262144;struct Complex &#123; double x, y; Complex() &#123;&#125; Complex(double x, double y): x(x), y(y) &#123;&#125; Complex operator + (const Complex &amp; a) const &#123; return Complex(x + a.x, y + a.y); &#125; void operator += (const Complex &amp; a) &#123; *this = *this + a; &#125; Complex operator - (const Complex &amp; a) const &#123; return Complex(x - a.x, y - a.y); &#125; void operator -= (const Complex &amp; a) &#123; *this = *this - a; &#125; Complex operator * (const Complex &amp; a) const &#123; return Complex(x * a.x - y * a.y, x * a.y + y * a.x); &#125; void operator *= (const Complex &amp; a) &#123; *this = *this * a; &#125; Complex operator / (const Complex &amp; b) const &#123; Complex c = b.conj(); return (*this) * c / ((b * c).x); &#125; void operator /= (const Complex &amp; a) &#123; *this = *this / a; &#125; Complex operator * (const double &amp; a) const &#123; return Complex(x * a, y * a); &#125; void operator *= (const double &amp; a) &#123; *this = *this * a; &#125; Complex operator / (const double &amp; a) const &#123; return Complex(x / a, y / a); &#125; void operator /= (const double &amp; a) &#123; *this = *this / a; &#125; Complex conj() const &#123; return Complex(x, -y); &#125;&#125; ;struct fft &#123; Complex a[N], b[N], c[N], omg[N], inv[N]; int n, m, p, lim, rev[N]; void input() &#123; scanf("%d %d", &amp;n, &amp;m); ++n, ++m; for (int i = 0; i &lt; n; i++) &#123; int v; scanf("%d", &amp;v); a[i] = Complex(v, 0); &#125; for (int i = 0; i &lt; m; i++) &#123; int v; scanf("%d", &amp;v); b[i] = Complex(v, 0); &#125; &#125; void output() &#123; for (int i = 0; i &lt; n + m - 1; i++) &#123; printf("%d ", (int)(c[i].x + 0.5)); &#125; &#125; void init() &#123; for (p = 1; p &lt; n + m - 1; p &lt;&lt;= 1); for (; (1 &lt;&lt; lim) &lt; p; ++lim); for (int i = 0; i &lt; p; i++) &#123; omg[i] = Complex(cos(2.0 * PI * i / p), sin(2.0 * PI * i / p)); inv[i] = omg[i].conj(); rev[i] = (rev[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (lim - 1)); &#125; &#125; void transform(Complex f[N], Complex w[N]) &#123; for (int i = 0; i &lt; p; i++) if (i &lt; rev[i]) swap(f[i], f[rev[i]]); for (int len = 1; len &lt; p; len &lt;&lt;= 1) &#123; int step = (len &lt;&lt; 1); for (Complex *cur = f; cur != f + p; cur += step) &#123; for (int i = 0; i &lt; len; i++) &#123; Complex t = w[p / step * i] * cur[i + len]; cur[i + len] = cur[i] - t; cur[i] += t; &#125; &#125; &#125; &#125; void solve() &#123; input(); init(); transform(a, omg); transform(b, omg); for (int i = 0; i &lt; p; i++) c[i] = a[i] * b[i]; transform(c, inv); for (int i = 0; i &lt; p; i++) c[i] = Complex(c[i].x / p, 0.0); output(); &#125;&#125; fft;int main() &#123; fft.solve(); return 0;&#125;]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DP优化]]></title>
    <url>%2Fblogs%2FDP%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[DP优化1.矩阵快速幂优化DP当DP的转移可以用转移矩阵表示出来的时候，这个DP一般都是可以用矩阵快速幂来进行优化的 而且矩阵快速幂优化DP的特征非常的明显，一般是有一维状态数特别大，一维状态数特别小 然后建立转移矩阵的小技巧就是$trans_{i,j}$表示从状态i转移到状态j的贡献 然后矩阵快速幂还可以把乘法变成加法，加法变成取min/max，可以证明这样还是满足结合律的，实际的dp含义也不会被改变 是一种优化转移的很好的方式 当然，矩阵维护DP也可以扩展到动态DP，在这里跟题目无关就不讲了 2.数据结构优化DP数据结构优化DP 一般都是直接在数据结构里面维护每个DP值（和那个位置上对应的贡献），这个时候需要把移动指针产生的贡献全部拆分开来，然后如果贡献的叠加范围是存在某个特殊的性质（比如区间，或者某个数的倍数）就可以选择相应的数据结构进行维护 数据结构的使用非常灵活，需要多加练习才可以熟练掌握 3.决策单调性优化3.1 单调队列/单调栈优化一种比较简单的实现形式，通常是有比较显然的决策单调性 通常有两种方式： 3.1.1 维护点值数据结构中只需要存点，然后可以直接每次取维护的队首/栈顶来进行更新，维护简单 3.1.2 维护区间我们发现每个决策点的最优贡献是一个区间 那么我们就维护一个很多个区间组成的队列 这个队列每次加入的时候就可以进行比较并维护 具体实现是这样的： 如果当前决策点在最后一个位置都不会比最后一个最优区间优秀，说明他没有贡献 如果比当前最后一个区间全部的位置都要更优就可以直接删除最后的区间 如果只比当前最后的区间的一部分更优就二分出当前结点比上一个节点优的最早的节点，并把从二分出的节点到末尾区间的最优贡献点变成当前结点 3.1.2的单调队列还可以用来维护四边形不等式优化的DP 3.2 斜率优化斜率优化的一个典型形式就是$dp_{i}=dp_{j}+a_i*b_j+c_j$ 这时候因为出现了$a_i*b_j$，所以如果可以优化一般都是斜率优化（大概是因为其他的优化方式都不涉及乘除） 然后就可以非常无脑的把这个式子用一次函数式表示出来 比如上面的这个式子经过移项变成$-a_i*b_j+dp_{i}=dp_j+c_j$ 观察一下这个式子发现如果令 $y = dp_j +c_j$ $x=b_j$ $k=-a_i$ $b=dp_i$ 那么原来的式子实际上就变成了$y=kx+b$ 我们显然要求的就是截距b的某个极值 这样我们就可以把一个决策点j转化成二维平面上的一个点$(b_j,dp_j+c_j)$ 我们每次要用斜率$-a_i$去截出一个最大的$dp_i$ 很显然这个最优决策点一定存在于凸壳上面，所以直接用单调队列/单调栈维护出凸壳就可以了 然后根据题目看需不需要在凸壳上二分出最优的决策点就可以了 至于是上凸壳还是下凸壳，就可以根据k的单调性确定了 但是在x坐标$b_j$不单调的时候就只有使用3.2.2的方法了 3.3 分治优化3.3.1 普通分治有的时候我们不方便找到决策点但是可以知道，如果$i$的决策点是$p_i$，那么对于$j&lt;i&lt;k$有$p_j\le p_i\le p_k$ 那我们直接对于mid包里找到$p_{min}$然后递归成区间求解就可以了 3.3.2 CDQ分治这里对应斜率优化的时候$x$坐标不单调的情况 因为x不单调所以我们没有办法（其实也有办法）动态维护凸壳所以我们再用分治解决这个问题 首先选择一个mid，然后递归求解左边区间的问题，这个时候我们就已经知道了左边区间的所有的DP值 然后于是就可以把左边的所有点按照x归并排序之后建成凸壳并用右边的点进行询问，询问完了就可以继续递归右子区间进行解题了 分治复杂度是$nlogn$的 3.4 四边形不等式优化看起来是最简单的结构，但是用到了最复杂的思想 一般是需要证明一个这样的式子： $w_{i,j+1}+w_{i+1,j}\le w_{i, j}+ w_{i+1,j+1}$ 所以就可以得到 $w_{i+1,j}-w_{i+1,j+1}\le w_{i,j}-w_{i,j+1}$ $w_{i,j+1}-w_{i+1,j+1}\le w_{i,j}-w_{i+1,j}$ 推导出的通式就是：$对于i&lt;i’\le j&lt;j’,有w_{i,j}+w_{i’,j’}≤w_{i’,j}+w_{i,j’} $ 然后对于一个常见的转移方程$dp_i=dp_j+w_{i,j}$ 设i的决策点是$p_i$，那么i-1的决策点$p_{i-1}$一定满足： 任意的$k&lt;p_{i-1}$ 有$dp_{p_{i-1}}+w_{p_{i-1},i-1}\le dp_{k}+w_{k,i-1}$ 即$w_{p_{i-1},i-1}-w_{k,i-1}\le dp_{k}-dp_{p_{i-1}}$ 如果w满足平行四边形不等式，那么也一定有： $w_{p_{i-1},i}-w_{k,i}\le dp_{k}-dp_{p_{i-1}}$ 所以有$dp_{p_{i-1}}+w_{p_{i-1},i} \le dp_{k}+w_{k,i}$ 就证明了单调性，因为这个东西也是区间覆盖 所以还是可以用单调队列进行维护的 完结撒花]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>DP-优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[组合数学阅读笔记-第2章:排列与组合]]></title>
    <url>%2Fblogs%2F%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[2.1 基本计数原理2.1.1 加法原理集合$S$被分成两两不相交的集合$S_1,S_2,S_3,……,S_k$，有 |S|=|S_1|+|S_2|+|S_3|+......+|S_k|2.1.2 乘法原理集合$S$是有序对$(a,b)$的集合，其中a来自$S_a$，b来自$S_b$ |S|=|S_a|*|S_b|2.1.3 减法原理令集合$A\in U$，$A’={x|x\in U,x\notin A}$ |A|=|U|-|A'|2.1 4 除法原理把有限集合$S$分成k个部分是的每一部分包含的对象数目相同 k=\frac{|S|}{在一个部分中的对象数目}2.2 集合的排列 P(n,m)=\frac{n!}{(n-m)!} \frac{P(n,m)}{m}=\frac{n!}{m(n-m)!}(循环排列公式)2.3 集合的组合 C(n,m)=\frac{n!}{m!(n-m)!} C(n,m)=C(n-1,m)+C(n-1,m-1) C(n,0)+C(n,1)+C(n,2)+......+C(n,n)=2^n2.4 多重集合的排列 \frac{n!}{n_1!n_2!...n_k!}=C(n,n_1)*C(n-n_1,n_2)*...*C(n-n_1-n_2-...-n_{k-1},n_k)2.5 多重集合的组合 C(r+k-1,r)=C(r+k-1,k-1)(k种元素类型的无限集的r组合个数)2.6 有限概率在样本空间为$S$的实验中，事件$E$的概率定义为$S$中属于$E$的结果的比率 Prob(E)=\frac{|E|}{|S|}]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>数论-组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法-点分治]]></title>
    <url>%2Fblogs%2F%E7%82%B9%E5%88%86%E6%B2%BB%2F</url>
    <content type="text"><![CDATA[解决树上路径问题 在解决树上路径问题时，我们会想到将树拆成几部分来提高我们的时间效率，当一棵树被分成若干子树时，我们可以用同样的方法进行处理，并不断进行下去，所以为了使每次的处理最优，我们通常要选取树的重心进行处理，选取了重心我们的下一层子树节点数会更小，时间复杂度也就更优秀。 重心:一个点为重心，则它所连接的子树节点数最大值最小 变量定义 变量名 含义 rt 当前子树根节点 siz_tree 当前子树大小 F 以每个节点为根的最大子树大小 1.寻找重心 DFS出以每个点为根的最大子树大小 如果当前节点为根更优，更新当前节点为根 123456789101112void getroot(int u, int fa) &#123; siz[u] = 1, F[u] = 0; for (int i = head[u]; i; i = E[i].next) &#123; int v = E[i].v; if (v == fa || vis[v]) continue; getroot(v, u); siz[u] += siz[v]; F[u] = max(F[u], siz[v]); &#125; F[u] = max(F[u], siz_tree - siz[u]); if (F[u] &lt; F[rt]) rt = u;&#125; 2.更新对于一棵树的重心，优先考虑经过这个点的路径对答案的贡献(work统计，由题意而定) 3.继续递归删去已经计算过的重心(vis标记)，继续递归其子树 1234567891011void solve(int u) &#123; vis[u] = 1; work(u); for (int i = head[u]; i; i = E[i].next) &#123; int v = E[i].v; if (vis[v]) continue; F[rt = 0] = siz_tree = siz[v]; getroot(v, 0); solve(rt); &#125;&#125; 完成所有的solve操作后，就可以得到想要的答案了 因为每一次寻找子树的大小不超过 $n/2$ 所以分治层数不超过 $logn$ 所以总复杂度 $nlogn$ 练习题 POJ 1741 BZOJ 1316 BZOJ 14680 BZOJ 2152 BZOJ 2599]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>算法-点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树类·数据结构的简单运用--基础篇]]></title>
    <url>%2Fblogs%2F%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[引言线段树？顾名思义，就是一个节点维护某个区间的信息的数据结构 线段树有许多迷人的性质，我认为它是最美妙的数据结构了 它可以有很多的扩展变形：动态开点，可持久化线段树，树套树，线段树分治等… 实现方式的不一样也会带来不一样的效果 黑科技技巧更是有很多呢 那就来研究一下吧qwq 前置技能：静态线段树维护静态线段树维护是一切线段树的基础了 首先，线段树肯定是需要维护区间信息的 最核心的思想就是由小区间信息合并成大区间信息 而通常表示至少长度为2的区间的节点一般有两个子区间，并且长度均匀分配 前置技能0：数据表示方法在静态线段树中，数据需要怎么储存呢？ 首先我们需要一些静态的空间 12const int N = 2e5 + 10;int val[N &lt;&lt; 2]； 这里的$N &lt;&lt;2$是因为实际线段树节点是$2*N-1$个的，为了防止叶子节点爆炸，还需要再多一倍 那么接下来，看看节点的表示方法 首先假设线段树的范围是$[1,n]$，我们默认1号节点维护了$[1,n]$区间信息 剩下对于每个节点t（包含1） 都可以构造一种表示方法使得空间被完美利用 12#define LD (t &lt;&lt; 1)#define RD (t &lt;&lt; 1 | 1) 枚举一下情境就会发现这样表示是一定可以把空间利用完全的 前置技能1：维护信息前置技能1-1：向上维护标记怎么从左右儿子获得当前区间的全部信息呢？ 用一个函数来实现 1234void pushup(int t) &#123; //do something //example : maxv[t] = max(maxv[LD], maxv[RD]);&#125; 只需要找到对应的信息合并方式就可以了 如果需要维护的信息比较复杂，有一个办法：分解成很多个可以维护简单信息 前置技能1-2：向下传递标记这个思想是因为每次我们不能把左右标记传到叶子节点 因为这样的话复杂度就炸裂了 所以考虑怎么优化？ 我们需要用到一个叫做lazy标记的东西 这个东西可以储存我们还没有下放的标记 可以让我们在用到这个区间信息的时候再来慢慢下传 有一个结论，任意一个区间在线段树上最多被分成log个区间 所以复杂度就有保证了 本人习惯实现两个函数分别表示维护当前层的更新信息和将标记下传到子节点 123456789101112int lazy[N &lt;&lt; 2];void pushnow(int t, int tag) &#123; //用 tag 更新 t 的信息 //维护 tag 和 lazy[t] &#125;void pushdown(int t) &#123; if (lazy[t]) &#123; pushnow(LD, lazy[t]); pushnow(RD, lazy[t]); lazy[t] = 0; &#125;&#125; 前置技能2：建树建树，顾名思义，就是把这个线段树给建出来 具体实现方法是递归建树，因为线段树的左右儿子节点维护的区间的并就是当前节点维护的区间 那么我们就可以递归分配左右儿子区间了 因为要保证树高，所以每次分配的时候以当前区间$[l,r]$的中间节点$mid = (l + r) &gt;&gt; 1$作为分界线 如果建树的时候需要初始化一些信息就随机应变咯 12345678910void build(int t, int l, int r) &#123; if (l == r) &#123; //do something return; &#125; int mid = (l + r) &gt;&gt; 1; build(LD, l, mid); build(RD, mid + 1, r); pushup(t);&#125; 前置技能3：单点修改唔，现在需要改一个点的信息？怎么办？ 可以直接按照区间的范围递归找到那个你需要找的点，因为线段树最多只有log层，所以复杂度是有保证的 12345678910void modify_point(int t, int l, int r, int pos, int tag) &#123; if (l == r) &#123; pushnow(t, tag); return; &#125; int mid = (l + r) &gt;&gt; 1; if (pos &lt;= mid) modify_point(LD, l, mid, pos, tag); else modify_point(RD, mid + 1, r, pos, tag); pushup(t);&#125; 前置技能4：单点查询现在要查询一个点的信息？ 有些毒瘤手段先不说…… 就暴力递归就可以了，和单点查询一样的思路 1234567void query_point(int t, int l, int r, int pos) &#123; if (l == r) return something_you_need; int mid = (l + r) &gt;&gt; 1; if (pos &lt;= mid) return query_point(LD, l, mid, pos); else return query_point(RD, mid + 1, r, pos); //询问的时候不需要更新当前的信息，因为没有改变qwq&#125; 前置技能5：区间修改比单点修改稍微复杂一点，现在我们需要修改一整个区间的信息？怎么办？ 假设我们在考虑一个节点t，并且需要修改的区间$[ql,qr]$并没有包含t的区间$[l,r]$怎么办？ 如果$qr\le mid$，则这个修改只对t的左边儿子区间有影响，向左递归问题 如果$mid&lt;ql$，则这个修改只对t的右边儿子区间有影响，向右递归问题 还剩一种情况，就是t的左右区间各包含了一部分的$[ql,qr]$怎么办？，那么就同时暴力递归到左右两个子区间就可以了，因为有一个刚才提到的结论：任意一个区间在线段树上最多被分成log个区间 所以复杂度还是有保证的 注意一定要在递归成子区间之前下传标记并更新子区间信息哦！！，不然的话可能会出现神奇的错误（比如说当下传的时候有一些特殊的限制…..过会再讲） 123456789101112131415void modify_segment(int t, int l, int r, int ql, int qr, int tag) &#123; if (ql &lt;= l &amp;&amp; r &lt;= qr) &#123; pushnow(t, tag);//初学者可以仔细理解一下这个pushnow的作用,dalao跳过 return; &#125; pushdown(t);//向下传递一波标记 int mid = (l + r) &gt;&gt; 1; if (qr &lt;= mid) modify_segment(LD, l, mid, ql, qr, tag); else if (ql &gt; mod) modify_segment(RD, mid + 1, r, ql, qr, tag); else &#123; modify_segment(LD, l, mid, ql, mid, tag); modify_segment(RD, mid + 1, r, mid + 1, qr, tag); &#125; pushup(t);//向上更新一波信息&#125; 前置技能6：区间查询只要理解了区间修改查询就不是问题啦 还需要注意一下，因为区间查询的时候下传的标记都是完整的（覆盖了整个区间），所以区间信息不需要重新向上维护，因为$pushnow$函数已经把这个区间的信息维护了 12345678910111213int query_segment(int t, int l, int r, int ql, int qr) &#123; if (ql &lt;= l &amp;&amp; r &lt;= qr) return something_you_need; pushdown(t); int mid = (l + r) &gt;&gt; 1; if (qr &lt;= mid) return query_segment(LD, l, mid, ql, qr); else if (ql &gt; mid) return query_segment(RD, mid + 1, r, ql, qr); else &#123; int res; //合并res和query_segment(LD, l, mid, ql, mid)的信息 //合并res和query_segment(RD, mid + 1, r, mid + 1, qr)的信息 return res; &#125;&#125; 前置技能拓展：动态开点线段树动态开点是什么？就是不给每个节点分配固定的内存 因为如果分配内存可能会对内存空间造成极大的浪费 所以我们每次只给需要用到的区间分配内存并建立节点 应用于线段树合并和主席树和一些神奇的东西 因为主席树和一般的动态开点线段树有不小的区别，所以在这里不包含主席树的维护方式，后面单独讲解 前置技能拓展0：数据表示方法因为线段树不再是静态的了，显然是不能给每个节点分配静态的儿子 所以考虑用数组记录下来 因为需要动态分配内存，所以我们还需要一个指针记录分配到哪里了，并且需要一个指针记录根节点是什么 12int rt, tot = 0;//rt 根节点 tot 当前指针int ls[N], rs[N]，;//一个节点的左右儿子 前置技能拓展1：插入节点信息和静态线段树略有不同的是 动态开点线段树需要判断当前节点存不存在并分配内存 而且单次只会插入一个位置的信息 1234567891011void insert(int &amp;t, int l, int r, int pos) &#123; if (!t) t = ++tot; if (l == r) &#123; //do something return; &#125; int mid = (l + r) &gt;&gt; 1; if (pos &lt;= mid) insert(ls[t], l, mid, pos); else insert(rs[t], mid + 1, r, pos); pushup(t);&#125; 前置技能拓展2：动态开点线段树的合并有的时候我们在维护一些联通块的信息的时候需要用到动态开点线段树的合并 这样就可以快速合并两个联通块的信息了 这个算法的核心代码如下： 123456789101112131415bool isleaf(int t) &#123; return !ls[t] &amp;&amp; !rs[t];&#125;int merge(int x, int y) &#123; if (!x || !y) return x + y; if (isleaf(x) &amp;&amp; isleaf(y)) &#123; //把y的信息合并到x上 return x; &#125; pushdown(x), pushdown(y); ls[x] = merge(ls[x], ls[y]); rs[x] = merge(rs[x], rs[y]); pushup(x); return x;&#125; 具体来说就是如果当前两个节点都存在，就需要暴力合并两个节点的左儿子和右儿子 如果只有一个节点存在就可以直接返回了 需要特别注意一下如果两个节点都存在但是都没有左右儿子直接合并儿子会丢失信息，这个时候就需要直接合并了 暴力合并那一步看起来复杂度是错的 但是仔细想一想这个算法每一次运行用$O(1)$的代价删除1个节点 因为是动态开点，所以最开始最多有$nlog(n)$个节点，合并完后节点数是$[1,n]$的级别 所以复杂度是$O(nlog(n))$ 接下来进入正题 各种各样的线段树类别1.普通线段树很简单的线段树，维护的区间就是在原序列中的区间 可以支持一些简单的操作： 区间修改（加，减，乘） 区间查询（和，最大值，最小值，gcd，lcm） 注意一下维护的顺序就行了，其实并不难 其实对于不同的操作，需要修改的只有维护信息的三个函数：$pushup,pushdown,pushnow$ 也可以支持一些不那么简单的操作： 区间修改（区间开根号，区间位运算，区间取max，区间取min） 区间查询（中位数，带权中位数，历史最大值） 需要用到一些比较黑科技的东西，我也不太会 2.值域线段树研究明白了值域线段树就可以初步感受到线段树的奥妙了 首先这里的值域不要过于死板地理解 值域可以是数的大小，时间，权值，甚至是相对大小关系？ 存在无限的可能 值域线段树小探究：全序集维护来科普一些简单的全序集维护知识吧 维护全序集，大概是需要支持： 插入一个数 删除一个数 查询一个数的排名 查询排名是k的数 查询一个数的前驱 查询一个数的后继 首先轻轻松松地离线离散化一下 然后我们发现实际上需要支持地操作只有前四个，因为后两个都是可以通过前面转化得到的 来看看怎么实现，因为线段树维护的是值域，所以我们只需要记录每个数的出现次数就可以了 1int siz[N]; 接下来： 简单的pushup123void pushup(int t) &#123; siz[t] = siz[LD] + siz[RD];&#125; 插入12345678910void insert(int t, int l, int r, int vl) &#123; if (l == r) &#123; siz[t]++; return; &#125; int mid = (l + r) &gt;&gt; 1; if (vl &lt;= mid) insert(LD, l, mid, vl); else insert(RD, mid + 1, r, vl); pushup(t);&#125; 删除和插入差不多，就是$siz_t$减少1就可以了 查询一个数的排名每次如果当前节点大小大于mid就需要加上左边的数的个数 123456int rank(int t, int l, int r, int vl) &#123; if (l == r) return 1; int mid = (l + r) &gt;&gt; 1; if (vl &lt;= mid) return rank(LD, l, mid, vl); else return siz[LD] + rank(RD, mid + 1, r, vl);&#125; 查询第k小每次走到一个节点根据左儿子的大小判断一下该向哪边递归就可以了 注意返回的是离散后的下标，需要还原成本身的值 123456int kth(int t, int l, int r, int k) &#123; if (l == r) return l; int mid = (l + r) &gt;&gt; 1; if (siz[LD] &gt;= k) return kth(LD, l, mid, k); else return kth(RD, mid + 1, r, k - siz[LD]);//变成计算右儿子区间排名是k - siz[LD]的数&#125; 前驱&amp;后继123456int pre(int x) &#123;//传入离散后的下标 return kth(1, 1, n, rank(1, 1, n, x) - 1);&#125;int nxt(int x) &#123;//传入离散后的下标 return kth(1, 1, n, rank(1, 1, n, x + 1));&#125; 比平衡树好写到不知道哪里去有没有qwq？ 值域线段树虽然没有办法维护在原序列中的大小关系 但是却可以优化许多根值域有关的计算过程，常见于线段树优化DP或线段树分治 值域线段树还有许多奇妙的性质，后面慢慢探究 基于线段树实现的数据结构1.主席树也叫做可持久化线段树 最大的特点是必须离线且不支持修改，只支持查询 本身为什么叫可持久化线段树呢？ 因为每棵树代表的节点维护了一个前缀的信息 这样就很方便进行区间查询（差分的思想） 但是如果暴力开线段树会发生什么？ 空间复杂度$O(n^2)$不可承受 观察一下我们要维护的东西 因为是一个前缀，所以有很大一部分信息都是可以从前面一棵树继承过来的 那么我们考虑优化这个过程 事实证明，每次我们插入一个信息实际上需要修改的只有一条长度是$log(n)$的链 那么就把所有不需要新建的节点直接继承过来 因此需要动态开点 实现起来是这样的： 123456789101112void insert(int &amp;t, int last, int l, int r, int pos) &#123; t = ++tot; //t 从 last 继承一些信息 if (l == r) return; ls[t] = ls[last];//继承儿子信息 rs[t] = rs[last]; int mid = (l + r) &gt;&gt; 1; //判断一下需要新建哪个节点？ if (pos &lt;= mid) insert(ls[t], ls[last], l, mid, pos); else insert(rs[t], rs[last], mid + 1, r, pos); pushup(t);&#125; 通常主席树维护的信息都是前缀可减的，不然是没有办法查询的 在这里举两个简单的例子，把刚才维护全序集的rank和kth照搬到区间上 其实很简单，只需要每次查询的时候做差就可以了 123456789101112int rank(int t, int last, int l, int r, int vl) &#123; if (l == r) return 1; int mid = (l + r) &gt;&gt; 1; if (vl &lt;= mid) return rank(ls[t], ls[last], l, mid, vl); else return siz[ls[t]] - siz[ls[last]] + rank(rs[t], rs[last], mid + 1, r, vl);&#125;int kth(int t, int last, int l, int r, int k) &#123; if (l == r) return l; int mid = (l + r) &gt;&gt; 1, sizl = siz[ls[t]] - siz[ls[last]]; if (k &lt;= sizl) return kth(ls[t], ls[last], l, mid, k); else return kth(rs[t], rs[last], mid + 1, r, k - sizl);&#125; 可以发现主席树维护和权值线段树的维护区别就只有一个范围的限制 但是主席树还有一些奇妙的用途？ 先说几个常见的主席树套路： 可持久化原数组顺序，内层使用权值线段树这样的主席树应该是最常见的 可以解决一些和至于有关的区间查询问题 ，就是权值线段树的简单扩展 可持久化值域，内层使用原数组顺序这个思路很神奇 是从这道题中学习到的 有的时候我们不能直接维护有关值域的信息但是如果知道了当前的值是可以很方便地维护出原数组信息的时候 我们就可以考虑用可持久化值域的方法，并在内层树中消除掉值域的影响进行解题 主席树还有一些神奇的奇技淫巧……技巧篇给予讲解吧 2.树套树感觉很套路但是绝对不想写的东西 其实理解起来并不难 有很多线段树套线段树，线段树套平衡树，主席树套线段树，线段树套主席树之类的东西 一般是一眼就告诉你要树套树，然后就不想写了 在这里给一个沙雕题的example 给你一个矩阵，让你每次把一个矩形的中心节点权值改变乘成矩形中最大最小权值的平均数 首先肯定是树套树维护的 先把变量定义好 123#define LD(t) (t &lt;&lt; 1) #define RD(t) (t &lt;&lt; 1 | 1)int maxv[N &lt;&lt; 2][N &lt;&lt; 2], minv[N &lt;&lt; 2][N &lt;&lt; 2]; 然后把内层的pushup函数写一写 1234void pushup(int t, int id) &#123; maxv[id][t] = max(maxv[id][LD(t)], maxv[id][RD(t)]); minv[id][t] = min(minv[id][LD(t)], minv[id][RD(t)]);&#125; 对于每个内层树，如果属于外层树的叶子节点，那么可以直接暴力更新，复杂度$O(log(n))$ 1234567891011void modify_y(int t, int l, int r, int pos, int vl, int id) &#123; if (l == r) &#123; minv[id][t] = vl; maxv[id][t] = vl; return; &#125; int mid = (l + r) &gt;&gt; 1; if (pos &lt;= mid) modify_y(LD(t), l, mid, pos, vl, id); else modify_y(RD(t), mid + 1, r, pos, vl, id); pushup(t, id);&#125; 然后如果要更新不是叶子节点外层树对应的内层树怎么办？ 考虑从外层树的儿子节点合并对应的信息，只需要修改有影响的一条链，复杂度$O(nlog(n))$ 1234567891011void update_y(int t, int l, int r, int pos, int id) &#123; if (l == r) &#123; minv[id][t] = min(minv[LD(id)][t], minv[RD(id)][t]); maxv[id][t] = max(maxv[LD(id)][t], maxv[RD(id)][t]); return; &#125; int mid = (l + r) &gt;&gt; 1; if (pos &lt;= mid) update_y(LD(t), l, mid, pos, id); else update_y(RD(t), mid + 1, r, pos, id); pushup(t, id);&#125; 内层树的查询就简单而套路了 1234567891011pi query_y(int t, int l, int r,int ql, int qr, int id) &#123; if (ql &lt;= l &amp;&amp; r &lt;= qr) return pi(maxv[id][t], minv[id][t]); int mid = (l + r) &gt;&gt; 1; if (qr &lt;= mid) return query_y(LD(t), l, mid, ql, qr, id); else if (ql &gt; mid) return query_y(RD(t), mid + 1, r, ql, qr, id); else &#123; pi ansl = query_y(LD(t), l, mid, ql, mid, id); pi ansr = query_y(RD(t), mid + 1, r, mid + 1, qr, id); return pi(max(ansl.first, ansr.first), min(ansl.second, ansr.second)); &#125;&#125; 外层树修改的时候需要判断一下当前节点是不是叶子，如果是叶子直接更新y 否则先递归问题再调用$update_y$函数 12345678910void modify_x(int t, int l, int r, int x, int y, int vl) &#123; if (l == r) &#123; modify_y(1, 1, n, y, vl, t); return; &#125; int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) modify_x(LD(t), l, mid, x, y, vl); else modify_x(RD(t), mid + 1, r, x, y, vl); update_y(1, 1, n, y, t);&#125; 外层树的查询就是如果被查询区间包含调用内层查询，否则递归问题，简单而套路 1234567891011pi query_x(int t, int l, int r, int xl, int xr, int yl, int yr) &#123; if (xl &lt;= l &amp;&amp; r &lt;= xr) return query_y(1, 1, n, yl, yr, t); int mid = (l + r) &gt;&gt; 1; if (xr &lt;= mid) return query_x(LD(t), l, mid, xl, xr, yl, yr); else if (xl &gt; mid) return query_x(RD(t), mid + 1, r, xl, xr, yl, yr); else &#123; pi ansl = query_x(LD(t), l, mid, xl, mid, yl, yr); pi ansr = query_x(RD(t), mid + 1, r, mid + 1, xr, yl, yr); return pi(max(ansl.first, ansr.first), min(ansl.second, ansr.second)); &#125;&#125; 树套树也有很多变形 但无非就是外层处理到内层递归的简单套路，多写几道题体会一下就可以了 只要代码实现练习到位是很简单的 所以千万不要怕这个东西 3.李超树李超树是一种用来维护线段/函数的神奇数据结构 简单李超树支持查询一个x对应的所有y值的相关信息 用线段树来存储每个区间的相对最优解 这里用到了一个永久化标记的思想，这个在技巧篇讲…… 这个东西很好啊，每个节点记录区间的相对最优解之后 直接dfs到叶子节点把路径上经过的所有节点的权值全部取max就可以了 正确性非常显然，但是怎么维护呢？ 我们假设当前要更新的是一个节点$p_t$，那么如果$p_t$的k大于拿来更新的$val$的k 如果在$mid$处$p_t$大于$val$，那么显然在$[mid+1,r]$这个区间里val不可能比$p_t$更优 所以就把$val$递归到左区间更新 如果在$mid$处$p_t$小于$val$，那么在$[l,mid]$这个区间$p_t$不可能比$val$更优 所以就把$p_t$递归到右区间，再把$p_t$替换成val就可以了 只需要按照k的大小关系分类讨论一下就可以了 12345678910111213141516171819202122232425262728293031323334353637struct Line &#123; double k, b;&#125; p[(MAXN &lt;&lt; 2) + 10];double calc(int x, Line a) &#123; return a.k * (double) x + a.b;&#125;bool cmp(int x, Line a, Line b) &#123; return calc(x, a) &gt; calc(x, b); &#125;void modify(int t, int l, int r, Line vl) &#123; if (l == r) &#123; if (cmp(l, vl, p[t])) p[t] = vl; return; &#125; int mid = (l + r) &gt;&gt; 1; if (p[t].k &lt;= vl.k) &#123; if (cmp(mid, vl, p[t])) &#123; modify(LD, l, mid, p[t]); p[t] = vl; &#125; else &#123; modify(RD, mid + 1, r, vl); &#125; &#125; else &#123; if (cmp(mid, vl, p[t])) &#123; modify(RD, mid + 1, r, p[t]); p[t] = vl; &#125; else &#123; modify(LD, l, mid, vl); &#125; &#125;&#125;double query(int t, int l, int r, int pos) &#123; if (l == r) return calc(pos, p[t]); int mid = (l + r) &gt;&gt; 1; if (pos &lt;= mid) return max(calc(pos, p[t]), query(LD, l, mid, pos)); else return max(calc(pos, p[t]), query(RD, mid + 1, r, pos));&#125; 4.ZKW线段树我觉得严格意义来说这个算是奇技淫巧]]></content>
      <categories>
        <category>知识点整理</category>
      </categories>
      <tags>
        <tag>数据结构-线段树</tag>
      </tags>
  </entry>
</search>
