<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>可持久化点分树</title>
      <link href="/blogs/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%82%B9%E5%88%86%E6%A0%91/"/>
      <url>/blogs/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%82%B9%E5%88%86%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="可持久化点分树"><a href="#可持久化点分树" class="headerlink" title="可持久化点分树"></a>可持久化点分树</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在一些神奇的问题中，光是维护点分树（动态点分治）是完全没有办法解决问题的，例如<a href="http://codeforces.com/contest/757/problem/G" target="_blank" rel="noopener">这道题</a>，我们发现查询的区间是和树的形态无关的，这样的问题就不能单纯维护点分树，需要对点分树进行可持久化</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><h3 id="前置技能1-0-点分治"><a href="#前置技能1-0-点分治" class="headerlink" title="前置技能1.0 点分治"></a>前置技能1.0 点分治</h3><p>关于这个可以去看<a href="https://dream-maker-yk.github.io/blogs/%E7%82%B9%E5%88%86%E6%B2%BB/" target="_blank" rel="noopener">我上古时期的blog</a>，如果这个都看不懂就直接退群吧。。。。</p><h3 id="前置技能2-0-点分树（动态点分治）"><a href="#前置技能2-0-点分树（动态点分治）" class="headerlink" title="前置技能2.0 点分树（动态点分治）"></a>前置技能2.0 点分树（动态点分治）</h3><p>听起来在点分治上加上了动态两个字，其实就是把点分治中分治中心用树型关系表示出来</p><p>在统计到一个点的信息的时候，我们就直接从这个点出发，往点分树父亲节点上跳，比如我们需要查询到u节点距离小于等k的点的个数，我们就先看当前分治中心u管辖区域内有多少个点和他的距离小于等于k，然后我们跳到prt[u]，查询在prt[u]的子树里面有多少个距离小于等于k - dis(prt[u], u)的节点，但是我们发现u的管辖区域内的点存在重复计算，所以我们需要把这一部分用相同的方法容斥掉，就可以计算答案了</p><p>修改和查询十分类似，不赘讲（江老著名梗）了</p><h3 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h3><p>可持久化点分树，就拿上面哪个cf题做例子吧，用问题作为切入点可能会好一些</p><p>首先我们可以发现这道题的查询是和树无关的，如果只有单点的查询是很快可以在点分树上处理出来的</p><p>并且我们知道查询是可以转化成前缀和查询的，于是就有了维护可持久化点分树的思路</p><p>因为平常的点分我们是从下到上更新，这次需要变成从上到下的插入，并且在点分树上添加出来一条新的链，所以在考虑继承上一个点分树的状态的时候，我们需要在插入的时候继承不改变的子树的信息，因此我们需要先将原来的树进行三度化处理，这样每个分治重心的儿子最多只有三个，就可以处理了</p><p>三度化的技巧主要在于理解左兄弟右儿子的思路，把所有的兄弟用长度为0的边串起来，这样在新的树上的距离就是在原树上的距离了，并且因为串两个兄弟只需要1个点，所以新的树的总点数也是$O(n)$级别的，不影响复杂度</p><p>具体代码实现长成这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> last = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> cur : edge[u]) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = cur.first, w = cur.second;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    ++tmp;</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">1</span>) &#123;</span><br><span class="line">      addedge(u, v, w);</span><br><span class="line">      addedge(v, u, w);</span><br><span class="line">      last = u;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == ((<span class="keyword">signed</span>) edge[u].size()) - (u != <span class="number">1</span>)) &#123;</span><br><span class="line">      addedge(last, v, w);</span><br><span class="line">      addedge(v, last, w);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      m++;</span><br><span class="line">      addedge(last, m, <span class="number">0</span>);</span><br><span class="line">      addedge(m, last, <span class="number">0</span>);</span><br><span class="line">      last = m;</span><br><span class="line">      addedge(m, v, w);</span><br><span class="line">      addedge(v, m, w);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> cur : edge[u]) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = cur.first;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    rebuild(v, u);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中edge是原树的边，addedge是新树的边<br>然后因为我们需要在点分树上更新一直到节点u（当前的更新节点）<br>所以我们需要记录一下在点分树上u的每个祖先v是prt[v]的哪一个儿子<br>这个可以在第一次点分树预处理出来</p><p>然后为了保证复杂度（不要多一个log）<br>最好用$O(n\log n)$预处理，$O(1)$查询的LCA<br>就是在欧拉序上进行处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> LCA &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[N], st[N &lt;&lt; <span class="number">1</span>][LOG], dfn[N], Log[N &lt;&lt; <span class="number">1</span>], ind = <span class="number">0</span>;</span><br><span class="line">ll dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  st[dfn[u] = ++ind][<span class="number">0</span>] = u;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">    dis[v] = dis[u] + E[i].w;</span><br><span class="line">    dfs(v, u);</span><br><span class="line">    st[++ind][<span class="number">0</span>] = u;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkmin</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dep[x] &lt; dep[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= ind; i++) &#123;</span><br><span class="line">    Log[i] = Log[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; LOG; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= ind; i++) &#123;</span><br><span class="line">      st[i][j] = checkmin(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = dfn[x], y = dfn[y];</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">  <span class="keyword">int</span> k = Log[y - x + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> checkmin(st[x][k], st[y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dis[x] + dis[y] - dis[lca(x, y)] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们考虑普通的点分树在维护什么东西<br>首先是用来记录信息的值和用来进行容斥的值，因为这道题只需要记录距离，所以我们用两个值来表示就可以了，如果需要更复杂的维护就需要用到高级的数据结构了</p><p>我们查询到一个点的距离和的时候首先从根往下走，假设当前节点是v，查询节点是u，那么v除了u所在子树的所有点到u的所有距离就是除了u子树所有节点到v的距离和加上除了u所有子树的大小乘上u到v的距离</p><p>于是我们就可以进行容斥了</p><p>点分树部分的代码是这样的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Tree_Devide &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> ch[<span class="number">3</span>], id, siz;</span><br><span class="line">  ll sum[<span class="number">2</span>];</span><br><span class="line">&#125; s[N * LOG];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> siz[N], F[N], dep[N], siz_all, rt, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="number">1</span>;</span><br><span class="line">  F[u] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (v == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">    getroot(v, u);</span><br><span class="line">    siz[u] += siz[v];</span><br><span class="line">    F[u] = max(F[u], siz[v]);</span><br><span class="line">  &#125;</span><br><span class="line">  F[u] = max(F[u], siz_all - siz[u]);</span><br><span class="line">  <span class="keyword">if</span> (F[u] &lt; F[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">devide</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="number">1</span>;</span><br><span class="line">  s[u].id = u;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">    F[rt = <span class="number">0</span>] = siz_all = siz[v];</span><br><span class="line">    getroot(v, <span class="number">0</span>);</span><br><span class="line">    dep[rt] = dep[u] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j : pre[u]) &#123;</span><br><span class="line">      pre[rt].push_back(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[u].ch[j]) <span class="keyword">continue</span>;</span><br><span class="line">      s[u].ch[j] = rt;</span><br><span class="line">      pre[rt].push_back(j);</span><br><span class="line">      devide(rt);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> las, <span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  t = ++cnt;</span><br><span class="line">  s[t] = s[las];</span><br><span class="line">  s[t].siz++;</span><br><span class="line">  s[t].sum[<span class="number">0</span>] += getdis(s[t].id, u);</span><br><span class="line">  <span class="keyword">if</span> (fa) &#123;</span><br><span class="line">    s[t].sum[<span class="number">1</span>] += getdis(s[fa].id, u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (s[t].id == u) <span class="keyword">return</span>;</span><br><span class="line">  insert(s[t].ch[pre[u][dep[s[t].id]]], s[las].ch[pre[u][dep[s[t].id]]], u, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  ll res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dep[u]; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> cur = s[t].ch[pre[u][i]];</span><br><span class="line">    res += (s[t].siz - s[cur].siz) * getdis(s[t].id, u) + s[t].sum[<span class="number">0</span>] - s[cur].sum[<span class="number">1</span>];</span><br><span class="line">    t = cur;</span><br><span class="line">  &#125;</span><br><span class="line">  res += s[t].sum[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  F[rt = <span class="number">0</span>] = siz_all = cnt = m;</span><br><span class="line">  getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  root[<span class="number">0</span>] = rt;</span><br><span class="line">  devide(rt);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    insert(root[i], root[i - <span class="number">1</span>], a[i], <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后放一下cf757g的完整代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v, w, nxt;</span><br><span class="line">&#125; E[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q, a[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pi&gt; edge[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">  E[++tot] = (Edge) &#123;v, w, head[u]&#125;;</span><br><span class="line">  head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> last = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> cur : edge[u]) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = cur.first, w = cur.second;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    ++tmp;</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">1</span>) &#123;</span><br><span class="line">      addedge(u, v, w);</span><br><span class="line">      addedge(v, u, w);</span><br><span class="line">      last = u;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == ((<span class="keyword">signed</span>) edge[u].size()) - (u != <span class="number">1</span>)) &#123;</span><br><span class="line">      addedge(last, v, w);</span><br><span class="line">      addedge(v, last, w);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      m++;</span><br><span class="line">      addedge(last, m, <span class="number">0</span>);</span><br><span class="line">      addedge(m, last, <span class="number">0</span>);</span><br><span class="line">      last = m;</span><br><span class="line">      addedge(m, v, w);</span><br><span class="line">      addedge(v, m, w);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> cur : edge[u]) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = cur.first;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    rebuild(v, u);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCA &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[N], st[N &lt;&lt; <span class="number">1</span>][LOG], dfn[N], Log[N &lt;&lt; <span class="number">1</span>], ind = <span class="number">0</span>;</span><br><span class="line">ll dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  st[dfn[u] = ++ind][<span class="number">0</span>] = u;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">    dis[v] = dis[u] + E[i].w;</span><br><span class="line">    dfs(v, u);</span><br><span class="line">    st[++ind][<span class="number">0</span>] = u;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkmin</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dep[x] &lt; dep[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= ind; i++) &#123;</span><br><span class="line">    Log[i] = Log[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; LOG; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= ind; i++) &#123;</span><br><span class="line">      st[i][j] = checkmin(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = dfn[x], y = dfn[y];</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">  <span class="keyword">int</span> k = Log[y - x + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> checkmin(st[x][k], st[y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dis[x] + dis[y] - dis[lca(x, y)] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LCA::getdis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Tree_Devide &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> ch[<span class="number">3</span>], id, siz;</span><br><span class="line">  ll sum[<span class="number">2</span>];</span><br><span class="line">&#125; s[N * LOG];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> siz[N], F[N], dep[N], siz_all, rt, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="number">1</span>;</span><br><span class="line">  F[u] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (v == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">    getroot(v, u);</span><br><span class="line">    siz[u] += siz[v];</span><br><span class="line">    F[u] = max(F[u], siz[v]);</span><br><span class="line">  &#125;</span><br><span class="line">  F[u] = max(F[u], siz_all - siz[u]);</span><br><span class="line">  <span class="keyword">if</span> (F[u] &lt; F[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">devide</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="number">1</span>;</span><br><span class="line">  s[u].id = u;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">    F[rt = <span class="number">0</span>] = siz_all = siz[v];</span><br><span class="line">    getroot(v, <span class="number">0</span>);</span><br><span class="line">    dep[rt] = dep[u] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j : pre[u]) &#123;</span><br><span class="line">      pre[rt].push_back(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[u].ch[j]) <span class="keyword">continue</span>;</span><br><span class="line">      s[u].ch[j] = rt;</span><br><span class="line">      pre[rt].push_back(j);</span><br><span class="line">      devide(rt);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> las, <span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  t = ++cnt;</span><br><span class="line">  s[t] = s[las];</span><br><span class="line">  s[t].siz++;</span><br><span class="line">  s[t].sum[<span class="number">0</span>] += getdis(s[t].id, u);</span><br><span class="line">  <span class="keyword">if</span> (fa) &#123;</span><br><span class="line">    s[t].sum[<span class="number">1</span>] += getdis(s[fa].id, u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (s[t].id == u) <span class="keyword">return</span>;</span><br><span class="line">  insert(s[t].ch[pre[u][dep[s[t].id]]], s[las].ch[pre[u][dep[s[t].id]]], u, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  ll res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dep[u]; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> cur = s[t].ch[pre[u][i]];</span><br><span class="line">    res += (s[t].siz - s[cur].siz) * getdis(s[t].id, u) + s[t].sum[<span class="number">0</span>] - s[cur].sum[<span class="number">1</span>];</span><br><span class="line">    t = cur;</span><br><span class="line">  &#125;</span><br><span class="line">  res += s[t].sum[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  F[rt = <span class="number">0</span>] = siz_all = cnt = m;</span><br><span class="line">  getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  root[<span class="number">0</span>] = rt;</span><br><span class="line">  devide(rt);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    insert(root[i], root[i - <span class="number">1</span>], a[i], <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Tree_Devide::root;</span><br><span class="line"><span class="keyword">using</span> Tree_Devide::build;</span><br><span class="line"><span class="keyword">using</span> Tree_Devide::insert;</span><br><span class="line"><span class="keyword">using</span> Tree_Devide::query;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span><br><span class="line">  m = n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">    edge[u].push_back(make_pair(v, w));</span><br><span class="line">    edge[v].push_back(make_pair(u, w));</span><br><span class="line">  &#125;</span><br><span class="line">  rebuild(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  LCA::ST();</span><br><span class="line">  build();</span><br><span class="line">  ll lastans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">    <span class="keyword">int</span> op, l, r, u;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;l, &amp;r, &amp;u);</span><br><span class="line">      l ^= lastans;</span><br><span class="line">      r ^= lastans;</span><br><span class="line">      u ^= lastans;</span><br><span class="line">      lastans = query(root[r], u) - query(root[l - <span class="number">1</span>], u);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, lastans);</span><br><span class="line">      lastans %= (<span class="number">1</span> &lt;&lt; <span class="number">30</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">      u ^= lastans;</span><br><span class="line">      swap(a[u], a[u + <span class="number">1</span>]);</span><br><span class="line">      insert(root[u], root[u - <span class="number">1</span>], a[u], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可持久化点分树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Min25 筛法</title>
      <link href="/blogs/Min25/"/>
      <url>/blogs/Min25/</url>
      
        <content type="html"><![CDATA[<h1 id="Min25-筛法"><a href="#Min25-筛法" class="headerlink" title="Min25 筛法"></a>Min25 筛法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>min25 筛法可以解决一类积性函数前缀和的问题</p><script type="math/tex; mode=display">\sum_{i = 1} ^ n f(i)</script><p>这样的函数需要满足两个个条件才可以用Min25筛法：</p><ol><li>函数是积性函数</li><li>形如$f(x^k) [x是质数]$的函数值可以快速求出</li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>我们先考虑算出所有质数的$f(x)$函数的和，也就是素数和减去素数个数</p><p>首先我们假设需要求出</p><script type="math/tex; mode=display">\sum_{i = 1} ^ n f(i) [i是质数]</script><p>即小于等于n的素数和</p><p>考虑函数$g(n,y)$表示小于等于n的所有数里面是质数或者最小质因子<strong>大于</strong>$pri_j$的数的和</p><p>那么最后需要求出的答案就是$g(n,Psiz)$</p><p>考虑g函数怎么转移</p><p>当$pri_j^2&gt;n$的时候，显然不会有新的贡献，于是</p><script type="math/tex; mode=display">g(n, j) = g(n, j - 1)</script><p>否则的话我们把最小质因子是$pri_j$的贡献去掉</p><script type="math/tex; mode=display">g(n, j) = g(n, j - 1) - f(pri_j)(g(\frac{n}{pri_j}, j - 1) - \sum_{i = 1} ^ {j - 1} f(pri_{i}))</script><p>因为最小质因子小于$pri_j$的情况我们已经统计过了，所以需要把这些情况减掉<br>我们可以发现这里的f需要满足是<strong>完全积性函数</strong></p><p>我们现在算出来了所有质数的$f(x)$的和</p><p>那么就可以开始算$f(x)$的前缀和了</p><p>设$S(n, j)$表示小于等于n的数里面最小质因子<strong>大于等于</strong>$pri_j$的所有数的函数和</p><p>首先考虑所有质数的贡献</p><script type="math/tex; mode=display">S(n, j) = g(n, Psiz) - \sum_{i = 1} ^ {j - 1} f(pri_i)</script><p>然后枚举和数的最小质因子和其次幂来进行统计</p><script type="math/tex; mode=display">S(n, j) += \sum_{i = j} ^ {Psiz} \sum_{e = 1} ^ {pri_i^{e + 1} \le n} f(pri_i^e)S(\frac{n}{pri_i^e}, i + 1) + f(pri_i^{e + 1})</script><p>这样的算法复杂度是$\frac{n^{\frac{3}{4}}}{\log(n)}$</p><p>一般来说可能比杜教快一点？</p><p>适用范围比杜教大一些吧</p><p>挺好用的一个算法</p>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Min25筛 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>斯特林数什么的</title>
      <link href="/blogs/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E4%BB%80%E4%B9%88%E7%9A%84/"/>
      <url>/blogs/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E4%BB%80%E4%B9%88%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="斯特林数什么的"><a href="#斯特林数什么的" class="headerlink" title="斯特林数什么的"></a>斯特林数什么的</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="第一类strling数"><a href="#第一类strling数" class="headerlink" title="第一类strling数"></a>第一类strling数</h3><p>$\begin{bmatrix} n \\ m \end{bmatrix}$表示把$n$个数划分成$m$个环排列的方案数</p><h4 id="递推式1"><a href="#递推式1" class="headerlink" title="递推式1"></a>递推式1</h4><script type="math/tex; mode=display">\begin{bmatrix} n \\ m \end{bmatrix} = \begin{bmatrix} n - 1 \\ m - 1 \end{bmatrix} +\begin{bmatrix} n - 1 \\ m \end{bmatrix} \ast (n - 1)</script><blockquote><p>枚举最后一个点的位置</p></blockquote><h4 id="递推式2"><a href="#递推式2" class="headerlink" title="递推式2"></a>递推式2</h4><script type="math/tex; mode=display">\begin{bmatrix} n \\ m \end{bmatrix} = \sum_{i = 1} ^ n\begin{bmatrix} n - i \\ m - 1 \end{bmatrix} \ast (i - 1)! \ast \binom{n - 1}{i - 1}</script><blockquote><p>枚举最后一个环排列的大小</p></blockquote><h3 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h3><p>$\begin{Bmatrix} n \\ m \end{Bmatrix}$表示把$n$个数划分成$m$个无序集合的方案数</p><h4 id="递推式1-1"><a href="#递推式1-1" class="headerlink" title="递推式1"></a>递推式1</h4><script type="math/tex; mode=display">\begin{Bmatrix} n \\ m \end{Bmatrix} = \begin{Bmatrix} n - 1 \\ m - 1 \end{Bmatrix}+\begin{Bmatrix} n - 1\\ m \end{Bmatrix} \ast m</script><blockquote><p>枚举最后一个点的位置</p></blockquote><h4 id="递推式2-1"><a href="#递推式2-1" class="headerlink" title="递推式2"></a>递推式2</h4><script type="math/tex; mode=display">\begin{Bmatrix} n \\ m \end{Bmatrix} = \sum_{i = 1}^n \begin{Bmatrix} n  - i\\ m - 1 \end{Bmatrix}\ast \binom{n - 1}{i - 1}</script><blockquote><p>枚举最后一个集合的大小</p></blockquote><h4 id="特殊表达形式"><a href="#特殊表达形式" class="headerlink" title="特殊表达形式"></a>特殊表达形式</h4><script type="math/tex; mode=display">\begin{Bmatrix} n \\ m \end{Bmatrix}=\frac{1}{m!}\sum_{k = 0} ^ m (-1)^k \binom{m}{k}(m - k) ^n</script><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="公式1（下降幂转次幂）"><a href="#公式1（下降幂转次幂）" class="headerlink" title="公式1（下降幂转次幂）"></a>公式1（下降幂转次幂）</h3><script type="math/tex; mode=display">x^{\underline{n}} = \sum_{k = 0} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix}x^k</script><blockquote><p>证明如下：</p><p>比较简单，直接考虑怎么算出$x^k$项的系数就可以了，省略</p></blockquote><h3 id="公式2（次幂转下降幂）"><a href="#公式2（次幂转下降幂）" class="headerlink" title="公式2（次幂转下降幂）"></a>公式2（次幂转下降幂）</h3><script type="math/tex; mode=display">x^n = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} x ^ \underline{k}</script><p>也可以转换成组合数和阶乘的形式</p><script type="math/tex; mode=display">x^n = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} \binom{x}{k}k!</script><h3 id="公式3"><a href="#公式3" class="headerlink" title="公式3"></a>公式3</h3><script type="math/tex; mode=display">\sum_{k=m}^n\begin{bmatrix} n \\ k \end{bmatrix}\begin{Bmatrix} k \\ m \end{Bmatrix}(-1)^{n - k} = [m = n]</script><blockquote><p>证明如下：</p><p>将公式2代入公式1</p><p>得到：</p><script type="math/tex; mode=display">x^{\underline{n}} = \sum_{k = 0} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix}\sum_{m = 0} ^ k \begin{Bmatrix} k \\ m \end{Bmatrix} x ^ \underline{m}</script><p>交换和号得：</p><script type="math/tex; mode=display">x^{\underline{n}} = \sum_{m = 0} ^ n x^{\underline{m}}\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}</script><p>显然当$n = m$的时候$\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}$是1</p><p>所以有：</p><script type="math/tex; mode=display">0 = \sum_{m = 0} ^ {n - 1} x^{\underline{m}}\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}</script><p>因为对于任意的x上面的式子都成立，所以可以得到当$n\not= m$的时候$\sum_{k = m} ^ n (-1)^{n - k}\begin{bmatrix} n \\ k \end{bmatrix} \begin{Bmatrix} k \\ m \end{Bmatrix}$是0</p></blockquote><h3 id="公式4"><a href="#公式4" class="headerlink" title="公式4"></a>公式4</h3><script type="math/tex; mode=display">\sum_{k=m}^n\begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix}(-1)^{k - m} = [m = n]</script><blockquote><p>证明如下：</p><p>将公式1代入公式2</p><p>得到：</p><script type="math/tex; mode=display">x^{n} = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix} \sum_{m = 0} ^ k (-1)^{k - m}\begin{bmatrix} k \\ m \end{bmatrix}x^m</script><p>交换和号得：</p><script type="math/tex; mode=display">x^{n} = \sum_{m = 0} ^ n x^m\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}</script><p>显然当$n = m​$的时候$\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}​$是1</p><p>所以有：</p><script type="math/tex; mode=display">0 = \sum_{m = 0} ^ {n - 1} x^m\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}</script><p>因为对于任意的x上面的式子都成立，所以可以得到当$n\not= m​$的时候$\sum_{k = m} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}\begin{bmatrix} k \\ m \end{bmatrix} (-1)^{k - m}​$是0</p><p>ps:</p><p>当然$(-1)^{k - m}$和$(-1)^{n - k}$没有任何区别</p><p>因为$n - m$是偶数的时候，没有影响</p><p>$n - m$是奇数的时候，相当于全体取负，不影响结论</p></blockquote><h3 id="公式5"><a href="#公式5" class="headerlink" title="公式5"></a>公式5</h3><script type="math/tex; mode=display">\begin{bmatrix} n +1 \\ m + 1 \end{bmatrix} = \sum_{k = m} ^ n \begin{bmatrix} n \\ k \end{bmatrix}\binom{k}{m}</script><blockquote><p>证明如下：</p><p>因为一个环排列对应着一个置换，然后一个置换又可以差分成很多的环排列，所以假设前$n$个数分成了$k$个环排列，并且这k个环排列中有$m$个不变，剩下的$k - m$个和新的环排列组合起来变成一个完整的环排列，也就是第$m+1$个环排列</p></blockquote><h3 id="公式6"><a href="#公式6" class="headerlink" title="公式6"></a>公式6</h3><script type="math/tex; mode=display">\begin{Bmatrix} n +1 \\ m + 1 \end{Bmatrix} = \sum_{k = m} ^ n \binom{n}{k}\begin{Bmatrix} k \\ m \end{Bmatrix}</script><blockquote><p>证明如下：</p><p>假设不和当前数在同一个集合里面的数是k个，所以这k个数会分成m个集合，然后再用组合数算一算和当前数在一个集合的数的方案数</p></blockquote><h3 id="公式7"><a href="#公式7" class="headerlink" title="公式7"></a>公式7</h3><script type="math/tex; mode=display">\begin{bmatrix} n + 1\\ m + 1 \end{bmatrix} = \sum_{k = m} ^ n\begin{bmatrix} k\\ m \end{bmatrix}(\frac{n!}{k!}或n^{\underline{n - k}})</script><blockquote><p>其实就是第一类斯特林数的递推式2的化简版本，组合意义一模一样</p></blockquote><h3 id="公式8"><a href="#公式8" class="headerlink" title="公式8"></a>公式8</h3><script type="math/tex; mode=display">\begin{Bmatrix} n + 1\\ m + 1 \end{Bmatrix} = \sum_{k = m} ^ n\begin{Bmatrix} k\\ m \end{Bmatrix}(m+1)^{n - k}</script><blockquote><p>证明如下：</p><p>考虑第k+1个数是第一个被放进第m+1个集合中的数</p><p>所以前k个数会被放进m个集合中，并且还有$(m+1)^{n - k}$个数可以随便放</p></blockquote><h3 id="公式9（斯特林反演）"><a href="#公式9（斯特林反演）" class="headerlink" title="公式9（斯特林反演）"></a>公式9（斯特林反演）</h3><p>对于：</p><script type="math/tex; mode=display">g(n) = \sum_{k = 0} ^ n(-1)^{n - k}\begin{bmatrix} n\\ k \end{bmatrix}f(k)</script><p>有：</p><script type="math/tex; mode=display">f(n) = \sum_{k = 0} ^ n \begin{Bmatrix} n \\ k \end{Bmatrix}g(k)</script><p>反之亦然</p><blockquote><p>证明可以直接带入然后用公式3和公式4进行理解</p></blockquote><h2 id="简单运用"><a href="#简单运用" class="headerlink" title="简单运用"></a>简单运用</h2><h3 id="第一类斯特林数求行方法"><a href="#第一类斯特林数求行方法" class="headerlink" title="第一类斯特林数求行方法"></a>第一类斯特林数求行方法</h3><p>假设需要求第一类斯特林数第n行</p><p>首先有：</p><script type="math/tex; mode=display">x^{\overline{n}} = \sum_{i = 0} ^ n \begin{bmatrix}n \\ i\end{bmatrix}x^i</script><blockquote><p>就是下降幂换成上升幂，过程不变是是没有符号了，和公式1同理</p></blockquote><p>那么也就是说$x^{\overline{n}}$是第n行斯特林数的生成函数</p><p>然后可以用$O(n\log^2 n)$的时间分治fft来算</p><p>也可以用$O(n\log n)$的倍增算法</p><script type="math/tex; mode=display">f_{2n}(x) = x^{\overline{2n}} = f_n(x)f_n(x + n)</script><p>然后$f_n(x+n)$实际上就是把$f_n(x)$的各项$x^k$换成$(x+n)^k$</p><p>可以用二项式系数展开并且用$O(n\log n)$时间卷积求出</p><h3 id="第二类斯特林数求行方法"><a href="#第二类斯特林数求行方法" class="headerlink" title="第二类斯特林数求行方法"></a>第二类斯特林数求行方法</h3><p>实际上就是第二类斯特林数的特殊表达形式</p><p>发现没有其实这是一个卷积：</p><script type="math/tex; mode=display">\begin{Bmatrix} n \\ m \end{Bmatrix}=\frac{1}{m!}\sum_{k = 0} ^ m (-1)^k \binom{m}{k}(m - k) ^n</script><p>然后可以直接卷积算出来了</p>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斯特林数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>递归式的一般求解方法</title>
      <link href="/blogs/%E9%80%92%E5%BD%92%E5%BC%8F%E7%9A%84%E4%B8%80%E8%88%AC%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
      <url>/blogs/%E9%80%92%E5%BD%92%E5%BC%8F%E7%9A%84%E4%B8%80%E8%88%AC%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="递归式的一般求解方法"><a href="#递归式的一般求解方法" class="headerlink" title="递归式的一般求解方法"></a>递归式的一般求解方法</h1><p>对于一个通用的递归式模式</p><script type="math/tex; mode=display">f(i)=a_i (1\le j < d);\\f(dn+i)=cf(n)+\beta_i(0\le j < d, 1\le n)</script><p>我们于是可以把$n$用$d$进制表示出来</p><script type="math/tex; mode=display">n = (b_mb_{m-1}...b_{1}b_{0})_d</script><p>然后把答案用$c$进制表示出来</p><script type="math/tex; mode=display">f(n)=(a_{b_m}\beta_{b_{m - 1}}\beta_{b_{m - 2}}...\beta_{b_{1}}\beta_{b_{0}})_c</script><p>即：</p><script type="math/tex; mode=display">f((b_mb_{m-1}...b_{1}b_{0})_d)=(a_{b_m}\beta_{b_{m - 1}}\beta_{b_{m - 2}}...\beta_{b_{1}}\beta_{b_{0}})_c</script><p>或者，可以把独立的系数给拆开考虑，比如变成如下形式：</p><script type="math/tex; mode=display">f(n)=\alpha A(n)+\beta B(n)+\gamma C(n)+\delta D(n)+...</script><p>然后根据f函数的特殊性质或者特殊的n来进行推导</p><p><a href="http://guoxs.github.io/Blog/2016/10/04/the-jorsephus-problem/" target="_blank" rel="noopener">参考笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归式求解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多项式运算</title>
      <link href="/blogs/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%90%E7%AE%97/"/>
      <url>/blogs/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="多项式运算"><a href="#多项式运算" class="headerlink" title="多项式运算"></a>多项式运算</h1><p>本文所讲所有的多项式运算全部基于vector的使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Poly;</span><br></pre></td></tr></table></figure><h2 id="0-思想"><a href="#0-思想" class="headerlink" title="0.思想"></a>0.思想</h2><p>自认为多项式最重要的思想就是倍增了</p><p>其次就是分治</p><p>建议先看看<code>fft残疾人手册</code>和<code>ntt残疾人手册</code></p><h2 id="1-多项式加法"><a href="#1-多项式加法" class="headerlink" title="1.多项式加法"></a>1.多项式加法</h2><p>$C(n)=A(n)+B(n)$</p><p>就是系数相加，非常简单的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">add</span><span class="params">(Poly a, Poly b)</span> </span>&#123;</span><br><span class="line">  a.resize(max(a.size(), b.size()));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; b.size(); i++)</span><br><span class="line">    a[i] = add(a[i], b[i]);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-多项式减法"><a href="#2-多项式减法" class="headerlink" title="2.多项式减法"></a>2.多项式减法</h2><p>$C(n)=A(n)-B(n)$</p><p>系数相减，依旧简单的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">sub</span><span class="params">(Poly a, Poly b)</span> </span>&#123;</span><br><span class="line">  a.resize(max(a.size(), b.size()));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; b.size(); i++)</span><br><span class="line">    a[i] = sub(a[i], b[i]);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-多项式乘法"><a href="#3-多项式乘法" class="headerlink" title="3.多项式乘法"></a>3.多项式乘法</h2><p>$C(n)=\sum_{i=0}^nA(i)B(n-i)$</p><p>就是ntt</p><p>需要预处理原根的次幂</p><p>交换位置的时候动态处理就好，因为在倍增过程中ntt的长度不一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> w[<span class="number">2</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">18</span>); i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    w[<span class="number">1</span>][i] = w[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> wn;</span><br><span class="line">    wn = fast_pow(G, (Mod - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) </span><br><span class="line">      w[<span class="number">1</span>][i + j] = mul(wn, w[<span class="number">1</span>][i + j - <span class="number">1</span>]);</span><br><span class="line">    wn = fast_pow(G, Mod - <span class="number">1</span> - (Mod - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">      w[<span class="number">0</span>][i + j] = mul(wn, w[<span class="number">0</span>][i + j - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">(<span class="keyword">int</span> *t, <span class="keyword">int</span> len, <span class="keyword">int</span> typ)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; i) swap(t[i], t[j]);</span><br><span class="line">    <span class="keyword">for</span> (k = (len &gt;&gt; <span class="number">1</span>); k &amp; i; k &gt;&gt;= <span class="number">1</span>) i ^= k;</span><br><span class="line">    i ^= k;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t[j + k], y = mul(t[j + k + i], w[typ][i + k]);</span><br><span class="line">        t[j + k] = add(x, y);</span><br><span class="line">        t[j + k + i] = sub(x, y);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (typ) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> inv = fast_pow(len, Mod - <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    t[i] = mul(t[i], inv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly <span class="title">mul</span><span class="params">(<span class="keyword">const</span> Poly &amp;a, <span class="keyword">const</span> Poly &amp;b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = a.size() + b.size() + <span class="number">1</span>;</span><br><span class="line">  len = <span class="number">1</span> &lt;&lt; (<span class="keyword">int</span>) <span class="built_in">ceil</span>(log2(len));</span><br><span class="line">  <span class="keyword">static</span> Poly prea, preb;</span><br><span class="line">  prea = a;</span><br><span class="line">  preb = b;</span><br><span class="line">  prea.resize(len);</span><br><span class="line">  preb.resize(len); </span><br><span class="line">  transform(&amp;prea[<span class="number">0</span>], len, <span class="number">1</span>);</span><br><span class="line">  transform(&amp;preb[<span class="number">0</span>], len, <span class="number">1</span>); </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    prea[i] = mul(prea[i], preb[i]);</span><br><span class="line">  transform(&amp;prea[<span class="number">0</span>], len, <span class="number">0</span>);</span><br><span class="line">  clean(prea);</span><br><span class="line">  <span class="keyword">return</span> prea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-多项式求逆"><a href="#4-多项式求逆" class="headerlink" title="4.多项式求逆"></a>4.多项式求逆</h2><p>对于多项式$A$，我们要求出$B$</p><p>满足$A\ast B=1(\mod x^{n+1})$</p><p>这里的$\mod x^n$是保留前$n+1$个系数的意思，不然$B(n)$会有无穷项</p><p>我们假设已经求出了$B’$满足$A\ast B’=1(\mod x^{\lceil\frac{n}{2}\rceil})$</p><p>那么因为存在$A\ast B=1(\mod x^{\lceil\frac{n}{2}\rceil})$</p><p>所以$A\ast (B-B’)=0(\mod x^{\lceil\frac{n}{2}\rceil})$</p><p>又因为A不是0，所以$(B-B’)=0(\mod x^{\lceil\frac{n}{2}\rceil})$</p><p>两边同时平方（模数也要平方）</p><p>$B^2-2\ast B\ast B’+B’^2=0(\mod x^n)$</p><p>因为有个$B^2$不好计算，所以把等式两边同时乘上$A$</p><p>得到$B-2\ast B’+A\ast B’^2=0(\mod x^n)$</p><p>即$B=2\ast B’-A\ast B’^2(\mod x^n)$</p><p>这样就可以递归求解了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">inv</span><span class="params">(Poly a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> Poly(<span class="number">1</span>, fast_pow(a[<span class="number">0</span>], Mod - <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">1</span> &lt;&lt; ((<span class="keyword">int</span>) <span class="built_in">ceil</span>(log2(n)) + <span class="number">1</span>);</span><br><span class="line">  Poly x = inv(a, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), y;</span><br><span class="line">  x.resize(len);</span><br><span class="line">  y.resize(len);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    y[i] = a[i];</span><br><span class="line">  transform(&amp;x[<span class="number">0</span>], len, <span class="number">1</span>);</span><br><span class="line">  transform(&amp;y[<span class="number">0</span>], len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    x[i] = mul(x[i], sub(<span class="number">2</span>, mul(x[i], y[i])));</span><br><span class="line">  transform(&amp;x[<span class="number">0</span>], len, <span class="number">0</span>);</span><br><span class="line">  x.resize(n);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly <span class="title">inv</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> inv(a, a.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-多项式除法"><a href="#5-多项式除法" class="headerlink" title="5.多项式除法"></a>5.多项式除法</h2><p>对于n次多项式$A$和m次多项式$B$，构造出小于n-m次多项式$C$和小于m次的多项式$D$</p><p>满足$A=B*C+D$</p><p>我们考虑一下多项式$A$的系数反转形式记做$RevA$</p><p>所以$RevA(x)=x^nA(\frac{1}{x})$</p><p>我们把原来的式子左右同时乘上$x^n$</p><p>得到$A(\frac{1}{x})\ast x^n=B(\frac{1}{x})\ast C(\frac{1}{x})\ast x^n+D(\frac{1}{x})\ast x^n$</p><p>所以$RevA(x)=RevB(x)\ast RevC(x)+x^{n-m+1}RevD(x)$</p><p>在$\mod x^{n-m+1}$的意义下发现$RevD$就没了，然而并不影响$RevA,RevB,RevC$</p><p>所以我们只需要求出$RevB$在$\mod x^{n-m+1}$意义下的逆元，然后就可以算出$RevC$和$RevD$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">rev</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  clean(a);</span><br><span class="line">  reverse(a.begin(), a.end());</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">(Poly a, Poly b, Poly &amp;c, Poly &amp;d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = a.size(), m = b.size();</span><br><span class="line">  Poly ra = rev(a), rb = rev(b);</span><br><span class="line">  ra.resize(n - m + <span class="number">1</span>);</span><br><span class="line">  rb.resize(n - m + <span class="number">1</span>);</span><br><span class="line">  c = mul(ra, inv(rb));</span><br><span class="line">  c.resize(n - m + <span class="number">1</span>);</span><br><span class="line">  c = rev(c);  </span><br><span class="line">  d = sub(a, mul(b, c));</span><br><span class="line">  clean(c), clean(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-多项式求导"><a href="#6-多项式求导" class="headerlink" title="6.多项式求导"></a>6.多项式求导</h2><p>因为多项式的形式很简单，所以求导直接可以模拟出来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">deri</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = a.size();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    a[i - <span class="number">1</span>] = mul(a[i], i);</span><br><span class="line">  a.resize(n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-多项式积分"><a href="#7-多项式积分" class="headerlink" title="7.多项式积分"></a>7.多项式积分</h2><p>积分也直接模拟吧。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">inte</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = a.size();</span><br><span class="line">  a.resize(n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    a[i] = mul(a[i - <span class="number">1</span>], fast_pow(i, Mod - <span class="number">2</span>));</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-多项式对数函数"><a href="#8-多项式对数函数" class="headerlink" title="8.多项式对数函数"></a>8.多项式对数函数</h2><p>对于n次多项式$A$我们需要求出n次多项式$B$满足$B=\ln(A)$</p><p>两边同时求导</p><p>$B’=\frac{A’}{A}$</p><p>所以把$A$的导和逆乘起来然后积分回去就可以了。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">ln</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = a.size();</span><br><span class="line">  a = inte(mul(deri(a), inv(a)));</span><br><span class="line">  a.resize(len);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-多项式指数函数"><a href="#9-多项式指数函数" class="headerlink" title="9.多项式指数函数"></a>9.多项式指数函数</h2><p>对于n次多项式$A$我们需要求出来n次多项式$B$满足$B=e^A$</p><p>所以$\ln(B)=A $</p><p>然后我们构造一个函数$F(B)=\ln(B)-A$</p><p>我们要求函数$F(A)=0$的时候的解</p><p>根据泰勒展开和牛顿迭代：</p><p>$f(x)=f(x_0)+f’(x_0)(x-x_0)$</p><p>我们可以得到迭代公式：$x=x_0-\frac{f(x_0)}{f’(x_0)}$</p><p>对应到求exp上面来：$B=B_0-\frac{F(B_0)}{F’(B_0)}$</p><p>展开得到：$B=B_0-\frac{\ln(B_0)-A}{\frac{1}{B_0}}=B_0(1-\ln(B_0)+A)$</p><p>然后就可以根据上面的这个式子进行倍增，因为每一次计算长度会变成原来的两倍</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">exp</span><span class="params">(Poly a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> Poly(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  Poly x = <span class="built_in">exp</span>(a, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), y;</span><br><span class="line">  x.resize(n);</span><br><span class="line">  y = ln(x);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    y[i] = sub(a[i], y[i]);</span><br><span class="line">  y[<span class="number">0</span>]++;</span><br><span class="line">  x = mul(x, y);</span><br><span class="line">  x.resize(n);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly <span class="title">exp</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exp</span>(a, a.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-多项式开根"><a href="#10-多项式开根" class="headerlink" title="10.多项式开根"></a>10.多项式开根</h2><p>给定n次多项式$A$，求$B$满足$B^2=A(\mod x^{n+1})$</p><p>和求exp的思路比较类似，同样用到了牛顿迭代法</p><p>构造函数$F(B)=B^2-A$，求$F(B)=0$的解</p><p>带入迭代公式：$x=x_0-\frac{f(x_0)}{f’(x_0)}$</p><p>得到$B=B_0-\frac{B_0^2-A}{2B_0}=\frac{B_0^2+A}{2B_0}=\frac{1}{2}\ast (B_0+\frac{A}{B_0})$</p><p>依旧是倍增进行求解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Poly <span class="title">sqrt</span><span class="params">(Poly a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> Poly(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  Poly x = <span class="built_in">sqrt</span>(a, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), y;</span><br><span class="line">  x.resize(n);</span><br><span class="line">  y.resize(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    y[i] = a[i];</span><br><span class="line">  x = add(mul(inv(x), y), x);</span><br><span class="line">  <span class="keyword">int</span> inv2 = fast_pow(<span class="number">2</span>, Mod - <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    x[i] = mul(x[i], inv2);</span><br><span class="line">  x.resize(n);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly <span class="title">sqrt</span><span class="params">(Poly a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>(a, a.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>莫比乌斯反演和杜教筛</title>
      <link href="/blogs/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E5%92%8C%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
      <url>/blogs/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E5%92%8C%E6%9D%9C%E6%95%99%E7%AD%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="莫比乌斯反演和杜教筛"><a href="#莫比乌斯反演和杜教筛" class="headerlink" title="莫比乌斯反演和杜教筛"></a>莫比乌斯反演和杜教筛</h1><h2 id="0-数论函数"><a href="#0-数论函数" class="headerlink" title="0.数论函数"></a>0.数论函数</h2><p>数论函数是莫比乌斯反演和杜教筛的前置知识</p><h3 id="0-定义"><a href="#0-定义" class="headerlink" title="0.定义"></a>0.定义</h3><ul><li>数论函数：定义域是正整数的函数</li><li>积性函数：对于任意两个互质的正整数$a,b$，满足$f(ab)=f(a)f(b)$的函数</li><li>完全积性函数：对于任意两个正整数$a,b$，满足$f(ab)=f(a)f(b)$的函数</li></ul><h3 id="1-常见积性函数"><a href="#1-常见积性函数" class="headerlink" title="1.常见积性函数"></a>1.常见积性函数</h3><h4 id="1-单位函数"><a href="#1-单位函数" class="headerlink" title="1.单位函数"></a>1.单位函数</h4><p>非常简单的定义：$e(n)=[n=1]$</p><h4 id="2-常函数"><a href="#2-常函数" class="headerlink" title="2.常函数"></a>2.常函数</h4><p>也很简单的定义：$1(n)=1$</p><h4 id="3-恒等函数"><a href="#3-恒等函数" class="headerlink" title="3.恒等函数"></a>3.恒等函数</h4><p>依旧简单的定义：$id(n)=n$</p><h4 id="4-莫比乌斯函数"><a href="#4-莫比乌斯函数" class="headerlink" title="4.莫比乌斯函数"></a>4.莫比乌斯函数</h4><p>莫比乌斯函数$\mu(n)$，当n有平凡因子的时候值是$0$，否则就是$(-1)^{质因子个数}$，即：</p><script type="math/tex; mode=display">\mu(n)=\begin{cases}1\ (n=1)\\-1^k\ (n有k个质因子且没有平方因子)\\0\ (n有平方因子)\end{cases}</script><p>莫比乌斯函数的性质：</p><script type="math/tex; mode=display">\sum_{i|n}\mu(i)=[n=1]</script><h4 id="5-欧拉函数"><a href="#5-欧拉函数" class="headerlink" title="5.欧拉函数"></a>5.欧拉函数</h4><p>欧拉函数$\phi(n)$的定义是$[1,n]$中和n互质的数的个数</p><p>假设集合$P$包含了所有n的质因子，那么有：</p><script type="math/tex; mode=display">\phi(i)=n\prod_{p\in P}\frac{p-1}{p}</script><p>欧拉函数的性质：</p><script type="math/tex; mode=display">\sum_{i|n}\phi(i)=n</script><script type="math/tex; mode=display">若n\not=1,\sum_{i=1}^ni[(i,n)=1]=\frac{n\phi(n)}{2}(i)</script><h3 id="2-Dirichlet卷积"><a href="#2-Dirichlet卷积" class="headerlink" title="2.Dirichlet卷积"></a>2.Dirichlet卷积</h3><p>对于两个数论函数$f(n),g(n)$，定义Dirichlet卷积为：</p><script type="math/tex; mode=display">(f*g)(n)=\sum_{d|n}f(d)g(\frac{n}{d})</script><p>并且Dirichlet卷积满足交换律、结合律和分配率，即：</p><script type="math/tex; mode=display">f*g=g*f\\f*(g*h)=(f*g)*h\\f*(g+h)=f*g+f*h</script><p>由Dirichlet卷积我们可以推导出：</p><p><strong>如果函数$f,g$都是积性函数，那么$f*g$也是积性函数</strong></p><p>如果我们无法快速（在$n\log(n)$以内）求出$f\ast g$</p><p>那么我们就可以用$O(n\log((n))$的时间求出我们想要的$f\ast g $</p><p>可以这样处理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Poly;</span><br><span class="line"><span class="function">Poly <span class="title">Dirichlet</span><span class="params">(Poly f, Poly g)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = f.size();</span><br><span class="line">  <span class="function">Poly <span class="title">h</span><span class="params">(len)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j * i &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == j) h[i * j] += f[i] * g[j];</span><br><span class="line">      <span class="keyword">else</span> h[i * j] += f[i] * g[j] + f[j] * g[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-莫比乌斯反演"><a href="#1-莫比乌斯反演" class="headerlink" title="1.莫比乌斯反演"></a>1.莫比乌斯反演</h2><h3 id="1-莫比乌斯恒等式"><a href="#1-莫比乌斯恒等式" class="headerlink" title="1.莫比乌斯恒等式"></a>1.莫比乌斯恒等式</h3><p>如果两个函数$f, g $，满足</p><script type="math/tex; mode=display">f(n)=\sum_{d|n}g(d)</script><p>那么有：</p><script type="math/tex; mode=display">g(n)=\sum_{d|n}f(d)\mu(\frac{n}{d})</script><p>也可以表示成：</p><script type="math/tex; mode=display">g(n)=\sum_{n|d}f(d)\mu(\frac{d}{n})</script><p>但是后面这种形式应该不太常用</p><p>证明很简单，我们其实就是要证明：</p><p>$f=g\ast1$和$g=f \ast\mu$是等价的</p><p>证明其实很简单，第一个式子两边同时卷上$\mu$或者第二个式子两边同时卷上$1$</p><h3 id="2-使用技巧"><a href="#2-使用技巧" class="headerlink" title="2.使用技巧"></a>2.使用技巧</h3><p>注意在Mobius反演的时候有几种常用技巧：</p><ol><li>交换和号</li><li>根号分块（下底函数分块）</li><li>添加性质良好便于计算的积性函数</li></ol><h2 id="2-杜教筛"><a href="#2-杜教筛" class="headerlink" title="2.杜教筛"></a>2.杜教筛</h2><p>杜教筛，很方便，但是有其局限性</p><p>一般情况是我们需要计算一个积性函数$f$的前缀和：</p><script type="math/tex; mode=display">Sum(n)=\sum_{i=1}^nf(i)</script><p>于是我们可以构造一个有良好特殊性质的积性函数$g$，使得$f\ast g$可以快速算出并具有一定性质</p><p>然后我们可以快速算出：</p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{d|i}g(d)f(\frac{i}{d})</script><p>把上面的式子交换一下和号得到：</p><script type="math/tex; mode=display">\sum_{d=1}^n g(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}f(i)</script><p>就变成了：</p><script type="math/tex; mode=display">\sum_{d=1}^n g(d)Sum(\lfloor\frac{n}{d}\rfloor)</script><p>也就是说：</p><script type="math/tex; mode=display">Sum(n)+\sum_{d=2}^n g(d)Sum(\lfloor\frac{n}{d}\rfloor)=\sum_{i=1}^n\sum_{d|i}g(d)f(\frac{i}{d})</script><p>所以：</p><script type="math/tex; mode=display">Sum(n)=\sum_{i=1}^n\sum_{d|i}g(d)f(\frac{i}{d})-\sum_{d=2}^n g(d)Sum(\lfloor\frac{n}{d}\rfloor)</script><p>我们发现上面的这个式子右边的部分，一个可以快速计算，一个可以根号分块递归成子问题</p><p>注意我们需要用线性筛预处理一部分前缀和大概$O(n^{\frac{2}{3}})$个，这样时间效率是$O(n^{\frac{2}{3}})$的</p><p>常数比较大，主要是需要map来对ll值和前缀和进行映射</p><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h4><p>定义神树集是一个二维平面上的点集，使得存在至少一条直线恰好经过两个点</p><p>求$x\in[0,n],y\in[0,n]$的神树集个数$\mod 12345678$</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>首先有一个结论：<strong>只有点数小于2或者所有点共线的点集不是神树集</strong></p><p>那我们就把这一部分答案容斥掉就可以了</p><p>首先我们可以枚举两个端点的横纵坐标差然后进行统计（这里没有统计平行坐标轴的）</p><script type="math/tex; mode=display">sum=2*[\sum_{x=1}^n\sum_{y=1}^n2^{(x,y)-1}(n+1-x)(n+1-y)]</script><p>其中$(n+1-x)(n+1-y)$是可以选择的左边端点的数量</p><p>然后我们枚举gcd</p><script type="math/tex; mode=display">sum=\sum_{g=1}^n2^g\sum_{x=1}^{\lfloor\frac{n}{g}\rfloor}\sum_{y=1}^{\lfloor\frac{n}{g}\rfloor}(n-1-gx)(n+1-gy)[(x,y)=1]</script><p>然后把后面拆开按照g的次数分类</p><p>变成了</p><script type="math/tex; mode=display">sum=\sum_{g=1}^n(n+1)^2(2^g)F(\frac{n}{g})+(n+1)(2^gg)G(\frac{n}{g})+(2^gg^2)H(\frac{n}{g})</script><p>其中</p><script type="math/tex; mode=display">F(n)=\sum_{x=1}^n\sum_{y=1}^n[(x,y)=1]=[2\sum_{i = 1}^n\phi(i)]-1</script><script type="math/tex; mode=display">G(n)=\sum_{x=1}^n\sum_{y=1}^n(x+y)[(x,y)=1]</script><p>因为我们有：</p><script type="math/tex; mode=display">\sum_{i=1}^ni[(i,n)=1]=\frac{n\phi(n)}{2} (n!=1)</script><p>所以可以对$G(n)$进行化简，把x和y的贡献分别来看，得到：</p><script type="math/tex; mode=display">G(n)=[3\sum_{i=1}^ni\phi(i)]-1</script><p>同理，我们也可以对$H(n)$进行化简</p><script type="math/tex; mode=display">H(n)=\sum_{i=1}^ni^2\phi(i)</script><p>至于有关$i=1$的细节问题，请自行自习思考</p><p>然后发现$\sum_{i=1}^n\phi(i),\sum_{i=1}^ni\phi(i),\sum_{i=1}^ni^2\phi(i) $都是可以用杜教筛算出来的</p><p>然后$\sum_{i=1}^n 2^i, \sum_{i=1}^n 2^ii,\sum_{i=1}^n 2^i i^2$都是可以用做差法在$O(\log n)/O(1)$的时间内算出来的</p><p>到这里我们已经完成了一大部分</p><p>剩下的就是对还没有讨论的情况进行分析</p><ol><li><p>首先因为我们要算的是不合法情况，所以应该去掉被包含合法的两个点的个数</p><p>因此我们需要算出不和坐标轴平行的两个点点集的个数</p><p>所有点对个数是$\frac{(n+1)^2((n+1)^2-1)}{2}$，去掉与坐标轴平行的个数是$2(n+1)\frac{(n+1)n}{2}=(n+1)^2n$</p></li><li><p>其次因为在与坐标轴平行的情况中，点数大于2的情况我们没有减去</p><p>这一部分的情况实际上我们只用考虑$2(n+1)$个单独的行就可以了</p><p>对于每一行我们用所有的方案数减去小于3的方案数</p><p>就是$2^{n+1}-\frac{n(n+1)}{2}-(n+1)-1$</p></li><li><p>最后是所有方案数中点数小于2的也不合法，一共有$(n+1)^2+1$种</p></li></ol><p>然后就直接用总的方案数$2^{(n+1)^2}$种减去不合法的就可以了</p><p>注意一下$2^{(n+1)^2}$快速幂的时候指数不能直接取mod</p><p>并且还有一堆恶心的地方需要分类讨论，因为模数真的很奇葩</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll Mod = <span class="number">12345678</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">add</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (a + b) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sub</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((a - b) % Mod + Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; Mod) a %= Mod;</span><br><span class="line">  <span class="keyword">if</span> (b &gt; Mod) b %= Mod;</span><br><span class="line">  <span class="keyword">return</span> a * b % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fast_pow</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  ll res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mul(a, a))</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = mul(res, a);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  ll f, g, h;</span><br><span class="line">&#125; sum[N];</span><br><span class="line"><span class="built_in">map</span>&lt;ll, Node&gt; mp;</span><br><span class="line"></span><br><span class="line">ll n, tot, pri[N], phi[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll limit = min(n, N - <span class="number">1</span>); </span><br><span class="line">  phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= limit; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">      phi[i] = i - <span class="number">1</span>;</span><br><span class="line">      pri[++tot] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= tot &amp;&amp; pri[j] * i &lt;= limit; j++) &#123;</span><br><span class="line">      vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        phi[i * pri[j]] = phi[i] * pri[j];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        phi[i * pri[j]] = phi[i] * (pri[j] - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">    sum[i].f = add(sum[i - <span class="number">1</span>].f, phi[i]);</span><br><span class="line">    sum[i].g = add(sum[i - <span class="number">1</span>].g, mul(i, phi[i]));</span><br><span class="line">    sum[i].h = add(sum[i - <span class="number">1</span>].h, mul(mul(i, i), phi[i]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">geta</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &amp; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x, (x + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x / <span class="number">2</span>, x + <span class="number">1</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getb</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x / <span class="number">6</span>, mul(x + <span class="number">1</span>, <span class="number">2</span> * x + <span class="number">1</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">6</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x, mul((x + <span class="number">1</span>) / <span class="number">2</span>, (<span class="number">2</span> * x + <span class="number">1</span>) / <span class="number">3</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">6</span> == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x / <span class="number">2</span>, mul((x + <span class="number">1</span>) / <span class="number">3</span>, <span class="number">2</span> * x + <span class="number">1</span>)); </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">6</span> == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x / <span class="number">3</span>, mul((x + <span class="number">1</span>) / <span class="number">2</span>, <span class="number">2</span> * x + <span class="number">1</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">6</span> == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x / <span class="number">2</span>, mul(x + <span class="number">1</span>, (<span class="number">2</span> * x + <span class="number">1</span>) / <span class="number">3</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mul(x, mul((x + <span class="number">1</span>) / <span class="number">6</span>, <span class="number">2</span> * x + <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">solve</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; N) <span class="keyword">return</span> sum[x];</span><br><span class="line">  <span class="keyword">if</span> (mp.count(x)) <span class="keyword">return</span> mp[x];</span><br><span class="line">  ll pref = geta(x), preg = getb(x), preh = mul(pref, pref);</span><br><span class="line">  <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= x; i++) &#123;</span><br><span class="line">    ll j = x / (x / i);</span><br><span class="line">    Node cur = solve(x / i);</span><br><span class="line">    pref = sub(pref, mul(j - i + <span class="number">1</span>, cur.f));</span><br><span class="line">    preg = sub(preg, mul(sub(geta(j), geta(i - <span class="number">1</span>)), cur.g));</span><br><span class="line">    preh = sub(preh, mul(sub(getb(j), getb(i - <span class="number">1</span>)), cur.h));</span><br><span class="line">    i = j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mp[x] = (Node) &#123;pref, preg, preh&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calcf</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fast_pow(<span class="number">2</span>, x + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calcf</span><span class="params">(ll l, ll r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sub(calcf(r), calcf(l - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calcg</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mul(x - <span class="number">1</span>, calcf(x)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calcg</span><span class="params">(ll l, ll r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sub(calcg(r), calcg(l - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calch</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(sub(mul(mul(x, x), calcf(x)), <span class="number">2</span> * calcg(x)), calcf(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calch</span><span class="params">(ll l, ll r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sub(calch(r), calch(l - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> main() &#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">  getprime();</span><br><span class="line">  ll resf = <span class="number">0</span>, resg = <span class="number">0</span>, resh = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    ll j = n / (n / i);</span><br><span class="line">    Node cur = solve(n / i);</span><br><span class="line">    resf = add(resf, mul(calcf(i, j), <span class="number">2</span> * cur.f - <span class="number">1</span>));</span><br><span class="line">    resg = add(resg, mul(calcg(i, j), <span class="number">3</span> * cur.g - <span class="number">1</span>));</span><br><span class="line">    resh = add(resh, mul(calch(i, j), cur.h));</span><br><span class="line">    i = j;</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = add(sub(mul(mul(n + <span class="number">1</span>, n + <span class="number">1</span>), resf), mul(n + <span class="number">1</span>, resg)), resh);</span><br><span class="line">  ans = sub(ans, mul(mul(n + <span class="number">1</span>, n + <span class="number">2</span>), geta(n)));</span><br><span class="line">  ans = add(ans, mul(mul(n + <span class="number">1</span>, n + <span class="number">1</span>), n));</span><br><span class="line">  ans = add(ans, mul(n * <span class="number">2</span> + <span class="number">2</span>, sub(fast_pow(<span class="number">2</span>, n + <span class="number">1</span>), add(n + <span class="number">2</span>, geta(n)))));</span><br><span class="line">  ans = sub(sub(fast_pow(fast_pow(<span class="number">2</span>, n + <span class="number">1</span>), n + <span class="number">1</span>), mul(n + <span class="number">1</span>, n + <span class="number">1</span>) + <span class="number">1</span>), ans); <span class="comment">//指数不能直接取模 </span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NTT残疾人手册</title>
      <link href="/blogs/%E5%A4%9A%E9%A1%B9%E5%BC%8F-NTT%20%E6%AE%8B%E7%96%BE%E4%BA%BA%E6%89%8B%E5%86%8C/"/>
      <url>/blogs/%E5%A4%9A%E9%A1%B9%E5%BC%8F-NTT%20%E6%AE%8B%E7%96%BE%E4%BA%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="NTT残疾人手册"><a href="#NTT残疾人手册" class="headerlink" title="NTT残疾人手册"></a>NTT残疾人手册</h1><p>建议先阅读FFT的残疾人手册</p><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>首先fft的计算方式是在实数域下进行运算的</p><p>所以难免会有精度误差，但是如果我们需要在模的意义下快速求多项式的卷积FFT就失灵了</p><p>因此NTT就出现了</p><h2 id="1-原根的介绍"><a href="#1-原根的介绍" class="headerlink" title="1.原根的介绍"></a>1.原根的介绍</h2><h3 id="关于单位根的性质回顾"><a href="#关于单位根的性质回顾" class="headerlink" title="关于单位根的性质回顾"></a>关于单位根的性质回顾</h3><p>我们需要一个在模意义下成立的具有单位根性质的东西</p><p>那么单位根的性质我们用到了哪一些呢？</p><script type="math/tex; mode=display">\omega_n^0\not= \omega_n^1\not= \cdots\not= \omega_n^{n-1}</script><script type="math/tex; mode=display">\omega_{n}^k=\omega_{\frac{n}{2}}^{\frac{k}{2}}</script><script type="math/tex; mode=display">\omega_{n}^k=\omega_{n}^{k \% n}</script><script type="math/tex; mode=display">\omega_{n}^{k+\frac{n}{2}}=-\omega_{n}^k</script><script type="math/tex; mode=display">\sum_{k=0}^{n-1} (\omega_n^{j-i})^k = n[i=j]</script><h3 id="原根概念的引入"><a href="#原根概念的引入" class="headerlink" title="原根概念的引入"></a>原根概念的引入</h3><p>模数Mod的原根g的定义是需要满足：</p><script type="math/tex; mode=display">g^0\not= g^1\not= \cdots\not= g^{p-2} \pmod {Mod}</script><p>而模数Mod定要满足是质数且可以表示成$Mod = k\cdot2^r+1$的形式</p><p>在这种情况下令$g_n=g^k\pmod {Mod}$</p><p>就可以使得：</p><script type="math/tex; mode=display">g_n^0\not= g_n^1\not=  \cdots\not=  g_n^{n-1} \pmod {Mod}</script><p>这样的话，我们就可以用原根来代替单位根进行模意义下的快速变换了</p><p>主要过程和fft没有本质区别</p>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FFT残疾人手册</title>
      <link href="/blogs/%E5%A4%9A%E9%A1%B9%E5%BC%8F-FFT%20%E6%AE%8B%E7%96%BE%E4%BA%BA%E6%89%8B%E5%86%8C/"/>
      <url>/blogs/%E5%A4%9A%E9%A1%B9%E5%BC%8F-FFT%20%E6%AE%8B%E7%96%BE%E4%BA%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="FFT残疾人手册"><a href="#FFT残疾人手册" class="headerlink" title="FFT残疾人手册"></a>FFT残疾人手册</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>FFT/NTT可以把本来复杂度是$\mathcal O(n^2)$的多项式乘法优化成$\mathcal O(n\log n)$的复杂度</p><p>在比较高等级的比赛中会用吧</p><p>在电脑上存一个板子也挺方便的</p><h2 id="1-点值表示法"><a href="#1-点值表示法" class="headerlink" title="1.点值表示法"></a>1.点值表示法</h2><p>一个$n$次多项式</p><script type="math/tex; mode=display">A(x)=\sum_{i=0}^{n-1}a_ix^i</script><p>的点值表示法为</p><script type="math/tex; mode=display"><(x_0,y_0),(x_1,y_1),...,(x_{n-1},y_{n-1})></script><p>其实就是把$x_0,x_1,…,x_{n-1}$代入$A(x)$中得到的$y_0,y_1,…,y_{n-1}$</p><p>一个大小为$n$点值表示法可以唯一确定一个$n$次多项式</p><p>因为点值表示法实际上就是n个方程</p><script type="math/tex; mode=display">A(x_0)=y_0\\A(x_1)=y_1\\...\\A(x_{n-1})=y_{n-1}</script><p>这样是可以唯一确定系数集合$a_0,a_1,…,a_{n-1}$的</p><h2 id="2-算法的主要思想"><a href="#2-算法的主要思想" class="headerlink" title="2.算法的主要思想"></a>2.算法的主要思想</h2><p>我们把多项式$A(x),B(x)$在$x_0,x_1,…,x_{2n-2}$处的点值分别求出来，得到</p><script type="math/tex; mode=display"><(x_0,A_0),(x_1,A_1),...,(x_{2n-2},A_{2n-2})>\\<(x_0,B_0),(x_1,B_1),...,(x_{2n-2},B_{2n-2})></script><p>把这些点值乘起来变成</p><script type="math/tex; mode=display"><(x_0,A_0*B_0),(x_1,A_1*B_1),...,(x_{2n-2},A_{2n-2}*B_{2n-2})></script><p>就可以还原成多项式$A(x)*B(x)$</p><h2 id="3-前置知识：单位根"><a href="#3-前置知识：单位根" class="headerlink" title="3.前置知识：单位根"></a>3.前置知识：单位根</h2><p>给没有复数基础知识的OIer普及一下：$i=\sqrt{-1}$，是一个常数</p><p>然后形如$cos(\theta)+i\cdot sin(\theta)$的复数有一个很好的性质</p><p>$(cos(\theta)+i\cdot sin(\theta))^k=cos(k\theta)+i\cdot sin(k\theta)$</p><p>这个东西可以用数学归纳法暴力展开证明</p><p>n次单位根是形如$cos(\frac{2\pi k}{n})+i\cdot sin(\frac{2\pi k}{n})$的复数</p><p>我们记$\omega_{n}=cos(\frac{2\pi}{n})+i\cdot sin(\frac{2\pi}{n})$</p><p>然后有$\omega_n^k=cos(\frac{2\pi k}{n})+i\cdot sin(\frac{2\pi k}{n})$</p><p>所以说n次单位根其实就是把单位元分成了n等份</p><p>根据这个性质很容易得到</p><script type="math/tex; mode=display">\omega_{n}^k=\omega_{\frac{n}{2}}^{\frac{k}{2}}</script><p>也就是说存在：</p><script type="math/tex; mode=display">(\omega_n^k)^2=\omega_{\frac{n}{2}}^k</script><p>根据三角函数的周期性可以得到一个式子：</p><script type="math/tex; mode=display">\omega_n^k=cos(\frac{2\pi ki}{n})+i\cdot sin(\frac{2\pi k}{n})=cos(\frac{2\pi(k\%n)}{n})+i\cdot sin(\frac{2\pi(k\%n)}{n})=\omega_n^{k\%n}</script><p>结合$(7)(8)$可以得到：</p><script type="math/tex; mode=display">(\omega_n^k)^2=(\omega_n^{k+\frac{n}{2}})^2=\omega_{\frac{n}{2}}^{k}</script><p>还有一个很好的性质：</p><script type="math/tex; mode=display">\omega_n^{\frac{n}{2}+k}=\omega_n^k \cdot \omega_n^{\frac{n}{2}}= \omega_n^k \cdot e^{\frac{2\pi i}{n}\cdot\frac{n}{2}} = \omega_n^k\cdot e^{\pi i} = - \omega_n^k</script><p>第$(9)$和$(10)$个式子都是我们要用到重要性质</p><h2 id="4-DFT过程及其优化"><a href="#4-DFT过程及其优化" class="headerlink" title="4.DFT过程及其优化"></a>4.DFT过程及其优化</h2><p>DFT就是所谓的离散傅里叶变换（Discrete Fourier Transform, DFT） </p><p>因为朴素的多项式转化成点值的复杂度是$n^2$的，很慢</p><p>所以考虑怎么把这个东西优化下来</p><p>首先DFT的优化用到了<strong>分治</strong>的思想</p><p>根据第$(9)$个式子，我们来猜想一些性质</p><p>多项式：</p><script type="math/tex; mode=display">A(x)=\sum_{i=0}^{n-1}a_ix^i</script><p>把A的所有项按照x指数的奇偶性来分类变成</p><script type="math/tex; mode=display">A(x)=(a_0x^0+a_2x^2+a_4x^4...)+(a_1x^1+a_3x^3+a_5x^5...)</script><p>令：</p><script type="math/tex; mode=display">F(x)=a_0x^0+a_2x^1+a_4x^2...\\G(x)=a_1x^0+a_3x^1+a_5x^2...</script><p>所以有：</p><script type="math/tex; mode=display">A(x)=F(x^2)+xG(x^2)</script><p>那么$A(x)$就变成了$F(x)$在$x^2$处的点值和$G(x)$在$x^2$处的点值和x的积之和</p><p>在取x集合的时候令：</p><script type="math/tex; mode=display">x_0=\omega_{n}^0\\x_1=\omega_{n}^1\\...\\x_{n-1}=\omega_{n}^{n-1}</script><p>就可以得到：</p><script type="math/tex; mode=display">A(\omega_{n}^k)=F(\omega_{\frac{n}{2}}^k)+\omega_{n}^kG(\omega_{\frac{n}{2}}^k)\\A(\omega_{n}^{k+\frac{n}{2}})=F(\omega_{\frac{n}{2}}^k)-\omega_{n}^kG(\omega_{\frac{n}{2}}^k)</script><p>这样的话我们只需要计算出$F(x)$和$G(x)$的值就可以算出多项式$A(x)$的点值了</p><p>而因为每次我们递归的时候都会缩小一半的计算范围，只不过需要预先把n补到2的次幂</p><p>所以这样的时间复杂度是：</p><script type="math/tex; mode=display">\mathcal T(n) = 2\mathcal T(\frac{n}{2})+\mathcal O(n) = \mathcal O(n\log n)</script><h2 id="5-IDFT过程及其优化"><a href="#5-IDFT过程及其优化" class="headerlink" title="5.IDFT过程及其优化"></a>5.IDFT过程及其优化</h2><p>我们做完了DFT，现在需要用点值还原出多项式</p><p>也就是说要从这个有n个等式的线性方程组：</p><script type="math/tex; mode=display">\begin{equation*} \left\{ \begin{array}{ccccccccc} a_0(\omega_n^0)^{0}&+&\cdots&+&a_{n-2}(\omega_n^0)^{n-2}&+&+a_{n-1}(\omega_n^0)^{n-1}&=&A(\omega_n^0) \\ a_0(\omega_n^1)^{0}&+&\cdots&+&a_{n-2}(\omega_n^1)^{n-2}&+&+a_{n-1}(\omega_n^1)^{n-1}&=&A(\omega_n^1) \\ \vdots & & \vdots & &\vdots& & \vdots & & \vdots\\ a_0(\omega_n^{n-1})^{0}&+&\cdots&+&a_{n-2}(\omega_n^{n-1})^{n-2}&+&+a_{n-1}(\omega_n^{n-1})^{n-1}&=&A(\omega_n^{n-1}) \end{array} \right. \end{equation*}</script><p>解出$a_0,a_1,…a_{n-1}$的值。</p><p>我们把上面的线性方程组写成矩阵形式，发现是：</p><script type="math/tex; mode=display">\begin{equation} \label{IDFT-equation} \begin{bmatrix} (\omega_n^0)^0 & (\omega_n^0)^1 & \cdots & (\omega_n^0)^{n-1} \\ (\omega_n^1)^0 & (\omega_n^1)^1 & \cdots & (\omega_n^1)^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{n-1})^0 & (\omega_n^{n-1})^1 & \cdots & (\omega_n^{n-1})^{n-1} \end{bmatrix} \begin{bmatrix} a_0 \\ a_1 \\ \vdots \\ a_{n-1} \end{bmatrix} = \begin{bmatrix} A(\omega_n^0) \\ A(\omega_n^1) \\ \vdots \\ A(\omega_n^{n-1}) \end{bmatrix} \end{equation}</script><p>也就是说我们要求出矩阵</p><script type="math/tex; mode=display">P=\begin{bmatrix} (\omega_n^0)^0 & (\omega_n^0)^1 & \cdots & (\omega_n^0)^{n-1} \\ (\omega_n^1)^0 & (\omega_n^1)^1 & \cdots & (\omega_n^1)^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{n-1})^0 & (\omega_n^{n-1})^1 & \cdots & (\omega_n^{n-1})^{n-1} \end{bmatrix}</script><p>的逆矩阵$P’$。</p><p>在这里直接给出逆矩阵$P’$并证明一定成立</p><script type="math/tex; mode=display">P'=\frac{1}{n}\left[\begin{matrix} (\omega_n^{-0})^0  & (\omega_n^{-0})^1    & \cdots & (\omega_n^{-0})^{n-1} \\(\omega_n^{-1})^0 & (\omega_n^{-1})^1 & \cdots & (\omega_n^{-1})^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{-(n-1)})^0 &(\omega_n^{-(n-1)})^1 & \cdots & (\omega_n^{-(n-1)})^{n-1}  \\\end{matrix}\right]</script><p>那么对于矩阵$Q=PP’$，有$Q_{i,j}=\sum_{k=0}^{n-1}P_{i,k}\cdot P’_{k,j}$</p><p>即$Q_{i,j}=\sum_{k=0}^{n-1}\frac{1}{n}\omega_n^{-ik}\cdot \omega_n^{kj}=\frac{1}{n}\sum_{k=0}^{n-1}(\omega_n^{j-i})^k $</p><ol><li><p>$i\not=j$：$Q_{i,j}=\frac{1}{n}\sum_{k=0}^{n-1}(\omega_n^{i-j})^k=\frac{1}{n}\cdot \frac{(\omega_n^{i-j})^n-1}{\omega_n^{i-j}-1}$</p><p>因为公式$(8)$，可以得到$(\omega_n^{i-j})^n=1$，所以$Q_{i,j}=0$</p></li><li><p>$i=j$：$Q_{i,j}=1$</p></li></ol><p>所以$P​$和$P’​$互为逆矩阵</p><p>也就是说现在要做的就是求出$P’$和点值矩阵的乘积，即：</p><script type="math/tex; mode=display">\frac{1}{n}\left[\begin{matrix} (\omega_n^{-0})^0  & (\omega_n^{-0})^1    & \cdots & (\omega_n^{-0})^{n-1} \\(\omega_n^{-1})^0 & (\omega_n^{-1})^1 & \cdots & (\omega_n^{-1})^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{-(n-1)})^0 &(\omega_n^{-(n-1)})^1 & \cdots & (\omega_n^{-(n-1)})^{n-1}  \\\end{matrix}\right]  \begin{bmatrix} A(\omega_n^0) \\ A(\omega_n^1) \\ \vdots \\ A(\omega_n^{n-1}) \end{bmatrix}</script><p>再来观察一下原来的DFT过程中我们做的事，就是求出了</p><script type="math/tex; mode=display">\left[\begin{matrix} (\omega_n^{0})^0  & (\omega_n^{0})^1    & \cdots & (\omega_n^{0})^{n-1} \\(\omega_n^{1})^0 & (\omega_n^{1})^1 & \cdots & (\omega_n^{1})^{n-1} \\ \vdots & \vdots & \ddots & \vdots \\ (\omega_n^{(n-1)})^0 &(\omega_n^{(n-1)})^1 & \cdots & (\omega_n^{(n-1)})^{n-1}  \\\end{matrix}\right]  \begin{bmatrix} a(\omega_n^0) \\ a(\omega_n^1) \\ \vdots \\ a(\omega_n^{n-1}) \end{bmatrix}</script><p>那这个时候我们只需要把$A(\omega_n^0) ,A(\omega_n^1) ,\dots,A(\omega_n^{n-1})$当作点值，并且把DFT过程中的$\omega_n^{k}$替换成$\omega_n^{-k}$就可以了</p><h2 id="6-FFT的递归实现"><a href="#6-FFT的递归实现" class="headerlink" title="6.FFT的递归实现"></a>6.FFT的递归实现</h2><p>dd只要理解了最初的迭代过程应该就问题不大了</p><p>就是简单的模拟出分治过程</p><p>omiga数组最好是可以预处理出来，但是这样的实现方式依旧有很大的常数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">int</span> n, Complex *p, <span class="keyword">int</span> pos, <span class="keyword">int</span> step, Complex *omg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> m = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  fft(m, p, pos, step &lt;&lt; <span class="number">1</span>, omg);</span><br><span class="line">  fft(m, p, pos + step, step &lt;&lt; <span class="number">1</span>, omg);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">2</span> * step * k;</span><br><span class="line">    tmp[k] = p[cur + pos] + omg[k * step] * p[cur + pos + step];</span><br><span class="line">    tmp[k + m] = p[cur + pos] - omg[k * step] * p[cur + pos + step];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) p[i * step + pos] = tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-FFT的迭代实现"><a href="#7-FFT的迭代实现" class="headerlink" title="7.FFT的迭代实现"></a>7.FFT的迭代实现</h2><p>我们考虑每一次的分组递归</p><p>第一次显然是按照最后一个二进制位的奇偶性来分组的</p><p>进入下一层迭代后就发现变成了一个$\frac{n}{2}$次多项式，可以看做所有的指数都除以了2，参考$(14)$</p><p>所以最后一位就没有意义了，下一次排序就是按照倒数第二位的奇偶性来进行分组的</p><p>发现本质就是把二进制反转进行交换，很奇妙的</p><p>可以这样预处理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">  rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (lim - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以就可以用迭代来进行运算啦</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">(Complex f[N], Complex w[N])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) <span class="keyword">if</span> (i &lt; rev[i]) swap(f[i], f[rev[i]]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; p; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> step = (len &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Complex *cur = f; cur != f + p; cur += step) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        Complex t = w[p / step * i] * cur[i + len];</span><br><span class="line">        cur[i + len] = cur[i] - t;</span><br><span class="line">        cur[i] += t; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-板子"><a href="#8-板子" class="headerlink" title="8.板子"></a>8.板子</h2><p>总的板子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">262144</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"></span><br><span class="line">  Complex() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Complex(<span class="keyword">double</span> x, <span class="keyword">double</span> y): x(x), y(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp; a) <span class="keyword">const</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> Complex(x + a.x, y + a.y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span> += (<span class="keyword">const</span> Complex &amp; a) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> + a;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(x - a.x, y - a.y);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span> -= (<span class="keyword">const</span> Complex &amp; a) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> - a;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(x * a.x - y * a.y, x * a.y + y * a.x);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> Complex &amp; a) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> * a;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Complex <span class="keyword">operator</span> / (<span class="keyword">const</span> Complex &amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">    Complex c = b.conj();</span><br><span class="line">    <span class="keyword">return</span> (*<span class="keyword">this</span>) * c / ((b * c).x);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> Complex &amp; a) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> / a;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span> &amp; a) <span class="keyword">const</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> Complex(x * a, y * a);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> <span class="keyword">double</span> &amp; a) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> * a;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">Complex <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span> &amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(x / a, y / a);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">double</span> &amp; a) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> / a;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function">Complex <span class="title">conj</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(x, -y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fft</span> &#123;</span></span><br><span class="line">  Complex a[N], b[N], c[N], omg[N], inv[N];</span><br><span class="line">  <span class="keyword">int</span> n, m, p, lim, rev[N];</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    ++n, ++m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> v; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">      a[i] = Complex(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> v; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">      b[i] = Complex(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>, (<span class="keyword">int</span>)(c[i].x + <span class="number">0.5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">1</span>; p &lt; n + m - <span class="number">1</span>; p &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (; (<span class="number">1</span> &lt;&lt; lim) &lt; p; ++lim);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">      omg[i] = Complex(<span class="built_in">cos</span>(<span class="number">2.0</span> * PI * i / p), <span class="built_in">sin</span>(<span class="number">2.0</span> * PI * i / p));</span><br><span class="line">      inv[i] = omg[i].conj();</span><br><span class="line">      rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (lim - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">(Complex f[N], Complex w[N])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) <span class="keyword">if</span> (i &lt; rev[i]) swap(f[i], f[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; p; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> step = (len &lt;&lt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (Complex *cur = f; cur != f + p; cur += step) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">          Complex t = w[p / step * i] * cur[i + len];</span><br><span class="line">          cur[i + len] = cur[i] - t;</span><br><span class="line">          cur[i] += t; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    init();</span><br><span class="line">    transform(a, omg);</span><br><span class="line">    transform(b, omg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) c[i] = a[i] * b[i];</span><br><span class="line">    transform(c, inv);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) c[i] = Complex(c[i].x / p, <span class="number">0.0</span>);</span><br><span class="line">    output();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; fft;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fft.solve();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DP优化</title>
      <link href="/blogs/DP%E4%BC%98%E5%8C%96/"/>
      <url>/blogs/DP%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="DP优化"><a href="#DP优化" class="headerlink" title="DP优化"></a>DP优化</h1><h2 id="1-矩阵快速幂优化DP"><a href="#1-矩阵快速幂优化DP" class="headerlink" title="1.矩阵快速幂优化DP"></a>1.矩阵快速幂优化DP</h2><p>当DP的转移可以用转移矩阵表示出来的时候，这个DP一般都是可以用矩阵快速幂来进行优化的</p><p>而且矩阵快速幂优化DP的特征非常的明显，一般是<strong>有一维状态数特别大，一维状态数特别小</strong></p><p>然后建立转移矩阵的小技巧就是$trans_{i,j}$表示从状态i转移到状态j的贡献</p><p>然后矩阵快速幂还可以把乘法变成加法，加法变成取min/max，可以证明这样还是满足结合律的，实际的dp含义也不会被改变</p><p>是一种优化转移的很好的方式</p><p>当然，矩阵维护DP也可以扩展到动态DP，在这里跟题目无关就不讲了</p><h2 id="2-数据结构优化DP"><a href="#2-数据结构优化DP" class="headerlink" title="2.数据结构优化DP"></a>2.数据结构优化DP</h2><p>数据结构优化DP</p><p>一般都是直接在数据结构里面维护每个DP值（和那个位置上对应的贡献），这个时候需要把移动指针产生的贡献全部拆分开来，然后如果贡献的叠加范围是存在某个特殊的性质（比如区间，或者某个数的倍数）就可以选择相应的数据结构进行维护</p><p>数据结构的使用非常灵活，需要多加练习才可以熟练掌握</p><h2 id="3-决策单调性优化"><a href="#3-决策单调性优化" class="headerlink" title="3.决策单调性优化"></a>3.决策单调性优化</h2><h3 id="3-1-单调队列-单调栈优化"><a href="#3-1-单调队列-单调栈优化" class="headerlink" title="3.1 单调队列/单调栈优化"></a>3.1 单调队列/单调栈优化</h3><p>一种比较简单的实现形式，通常是有比较显然的决策单调性</p><p>通常有两种方式：</p><h4 id="3-1-1-维护点值"><a href="#3-1-1-维护点值" class="headerlink" title="3.1.1 维护点值"></a>3.1.1 维护点值</h4><p>数据结构中只需要存点，然后可以直接每次取维护的队首/栈顶来进行更新，维护简单</p><h4 id="3-1-2-维护区间"><a href="#3-1-2-维护区间" class="headerlink" title="3.1.2 维护区间"></a>3.1.2 维护区间</h4><p>我们发现每个决策点的最优贡献是一个区间</p><p>那么我们就维护一个很多个区间组成的队列</p><p>这个队列每次加入的时候就可以进行比较并维护</p><p>具体实现是这样的：</p><ul><li>如果当前决策点在最后一个位置都不会比最后一个最优区间优秀，说明他没有贡献</li><li>如果比当前最后一个区间全部的位置都要更优就可以直接删除最后的区间</li><li>如果只比当前最后的区间的一部分更优就二分出当前结点比上一个节点优的最早的节点，并把从二分出的节点到末尾区间的最优贡献点变成当前结点</li></ul><p><strong>3.1.2的单调队列还可以用来维护四边形不等式优化的DP</strong></p><h3 id="3-2-斜率优化"><a href="#3-2-斜率优化" class="headerlink" title="3.2 斜率优化"></a>3.2 斜率优化</h3><p>斜率优化的一个典型形式就是$dp_{i}=dp_{j}+a_i*b_j+c_j$</p><p>这时候因为出现了$a_i*b_j$，所以如果可以优化一般都是斜率优化（大概是因为其他的优化方式都不涉及乘除）</p><p>然后就可以非常无脑的把这个式子用一次函数式表示出来</p><p>比如上面的这个式子经过移项变成$-a_i*b_j+dp_{i}=dp_j+c_j$</p><p>观察一下这个式子发现如果令</p><ul><li>$y = dp_j +c_j$</li><li>$x=b_j$</li><li>$k=-a_i$</li><li>$b=dp_i$</li></ul><p>那么原来的式子实际上就变成了$y=kx+b$</p><p>我们显然要求的就是截距b的某个极值</p><p>这样我们就可以把一个决策点j转化成二维平面上的一个点$(b_j,dp_j+c_j)$</p><p>我们每次要用斜率$-a_i$去截出一个最大的$dp_i$</p><p>很显然这个最优决策点一定存在于凸壳上面，所以直接用单调队列/单调栈维护出凸壳就可以了</p><p>然后根据题目看需不需要在凸壳上二分出最优的决策点就可以了</p><p>至于是上凸壳还是下凸壳，就可以根据k的单调性确定了</p><p><strong>但是在x坐标$b_j$不单调的时候就只有使用3.2.2的方法了</strong></p><h3 id="3-3-分治优化"><a href="#3-3-分治优化" class="headerlink" title="3.3 分治优化"></a>3.3 分治优化</h3><h4 id="3-3-1-普通分治"><a href="#3-3-1-普通分治" class="headerlink" title="3.3.1 普通分治"></a>3.3.1 普通分治</h4><p>有的时候我们不方便找到决策点但是可以知道，如果$i$的决策点是$p_i$，那么对于$j&lt;i&lt;k$有$p_j\le p_i\le p_k$</p><p>那我们直接对于mid包里找到$p_{min}$然后递归成区间求解就可以了</p><h4 id="3-3-2-CDQ分治"><a href="#3-3-2-CDQ分治" class="headerlink" title="3.3.2 CDQ分治"></a>3.3.2 CDQ分治</h4><p>这里对应斜率优化的时候$x$坐标不单调的情况</p><p>因为x不单调所以我们没有办法<del>（其实也有办法）</del>动态维护凸壳所以我们再用分治解决这个问题</p><p>首先选择一个mid，然后递归求解左边区间的问题，这个时候我们就已经知道了左边区间的所有的DP值</p><p>然后于是就可以把左边的所有点按照x归并排序之后建成凸壳并用右边的点进行询问，询问完了就可以继续递归右子区间进行解题了</p><p>分治复杂度是$nlogn$的</p><h3 id="3-4-四边形不等式优化"><a href="#3-4-四边形不等式优化" class="headerlink" title="3.4 四边形不等式优化"></a>3.4 四边形不等式优化</h3><p>看起来是最简单的结构，但是用到了最复杂的思想</p><p>一般是需要证明一个这样的式子：</p><p>$w_{i,j+1}+w_{i+1,j}\le w_{i, j}+ w_{i+1,j+1}$</p><p>所以就可以得到</p><p>$w_{i+1,j}-w_{i+1,j+1}\le w_{i,j}-w_{i,j+1}$</p><p>$w_{i,j+1}-w_{i+1,j+1}\le w_{i,j}-w_{i+1,j}$</p><p>推导出的通式就是：$对于i&lt;i’\le j&lt;j’,有w_{i,j}+w_{i’,j’}≤w_{i’,j}+w_{i,j’} $</p><p>然后对于一个常见的转移方程$dp_i=dp_j+w_{i,j}$</p><p>设i的决策点是$p_i$，那么i-1的决策点$p_{i-1}$一定满足：</p><p>任意的$k&lt;p_{i-1}$</p><p>有$dp_{p_{i-1}}+w_{p_{i-1},i-1}\le dp_{k}+w_{k,i-1}$</p><p>即$w_{p_{i-1},i-1}-w_{k,i-1}\le dp_{k}-dp_{p_{i-1}}$</p><p>如果w满足平行四边形不等式，那么也一定有：</p><p>$w_{p_{i-1},i}-w_{k,i}\le dp_{k}-dp_{p_{i-1}}$</p><p>所以有$dp_{p_{i-1}}+w_{p_{i-1},i} \le dp_{k}+w_{k,i}$</p><p>就证明了单调性，因为这个东西也是区间覆盖</p><p>所以还是可以用单调队列进行维护的</p><p>完结撒花</p>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP-优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>组合数学阅读笔记-第2章:排列与组合</title>
      <link href="/blogs/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/"/>
      <url>/blogs/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-基本计数原理"><a href="#2-1-基本计数原理" class="headerlink" title="2.1 基本计数原理"></a>2.1 基本计数原理</h2><h3 id="2-1-1-加法原理"><a href="#2-1-1-加法原理" class="headerlink" title="2.1.1 加法原理"></a>2.1.1 加法原理</h3><p>集合$S$被分成两两不相交的集合$S_1,S_2,S_3,……,S_k$，有</p><script type="math/tex; mode=display">|S|=|S_1|+|S_2|+|S_3|+......+|S_k|</script><h3 id="2-1-2-乘法原理"><a href="#2-1-2-乘法原理" class="headerlink" title="2.1.2 乘法原理"></a>2.1.2 乘法原理</h3><p>集合$S$是有序对$(a,b)$的集合，其中a来自$S_a$，b来自$S_b$</p><script type="math/tex; mode=display">|S|=|S_a|*|S_b|</script><h3 id="2-1-3-减法原理"><a href="#2-1-3-减法原理" class="headerlink" title="2.1.3 减法原理"></a>2.1.3 减法原理</h3><p>令集合$A\in U$，$A’={x|x\in U,x\notin A}$</p><script type="math/tex; mode=display">|A|=|U|-|A'|</script><h3 id="2-1-4-除法原理"><a href="#2-1-4-除法原理" class="headerlink" title="2.1 4 除法原理"></a>2.1 4 除法原理</h3><p>把有限集合$S$分成k个部分是的每一部分包含的对象数目相同</p><script type="math/tex; mode=display">k=\frac{|S|}{在一个部分中的对象数目}</script><h2 id="2-2-集合的排列"><a href="#2-2-集合的排列" class="headerlink" title="2.2 集合的排列"></a>2.2 集合的排列</h2><script type="math/tex; mode=display">P(n,m)=\frac{n!}{(n-m)!}</script><script type="math/tex; mode=display">\frac{P(n,m)}{m}=\frac{n!}{m(n-m)!}(循环排列公式)</script><h2 id="2-3-集合的组合"><a href="#2-3-集合的组合" class="headerlink" title="2.3 集合的组合"></a>2.3 集合的组合</h2><script type="math/tex; mode=display">C(n,m)=\frac{n!}{m!(n-m)!}</script><script type="math/tex; mode=display">C(n,m)=C(n-1,m)+C(n-1,m-1)</script><script type="math/tex; mode=display">C(n,0)+C(n,1)+C(n,2)+......+C(n,n)=2^n</script><h2 id="2-4-多重集合的排列"><a href="#2-4-多重集合的排列" class="headerlink" title="2.4 多重集合的排列"></a>2.4 多重集合的排列</h2><script type="math/tex; mode=display">\frac{n!}{n_1!n_2!...n_k!}=C(n,n_1)*C(n-n_1,n_2)*...*C(n-n_1-n_2-...-n_{k-1},n_k)</script><h2 id="2-5-多重集合的组合"><a href="#2-5-多重集合的组合" class="headerlink" title="2.5 多重集合的组合"></a>2.5 多重集合的组合</h2><script type="math/tex; mode=display">C(r+k-1,r)=C(r+k-1,k-1)(k种元素类型的无限集的r组合个数)</script><h2 id="2-6-有限概率"><a href="#2-6-有限概率" class="headerlink" title="2.6 有限概率"></a>2.6 有限概率</h2><p>在样本空间为$S$的实验中，事件$E$的概率定义为$S$中属于$E$的结果的比率</p><script type="math/tex; mode=display">Prob(E)=\frac{|E|}{|S|}</script>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论-组合数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法-点分治</title>
      <link href="/blogs/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
      <url>/blogs/%E7%82%B9%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p><strong>解决树上路径问题</strong></p><p>在解决树上路径问题时，我们会想到将树拆成几部分来提高我们的时间效率，当一棵树被分成若干子树时，我们可以用同样的方法进行处理，并不断进行下去，所以<strong>为了使每次的处理最优，我们通常要选取树的重心进行处理</strong>，选取了重心我们的下一层子树节点数会更小，时间复杂度也就更优秀。</p><ul><li>重心:一个点为重心，则它所连接的子树节点数最大值最小</li></ul><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><div class="table-container"><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>rt</td><td>当前子树根节点</td></tr><tr><td>siz_tree</td><td>当前子树大小</td></tr><tr><td>F</td><td>以每个节点为根的最大子树大小</td></tr></tbody></table></div><h4 id="1-寻找重心"><a href="#1-寻找重心" class="headerlink" title="1.寻找重心"></a><strong>1.寻找重心</strong></h4><ul><li>DFS出以每个点为根的最大子树大小</li><li>如果当前节点为根更优，更新当前节点为根</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  siz[u] = <span class="number">1</span>, F[u] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (v == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">    getroot(v, u);</span><br><span class="line">    siz[u] += siz[v];</span><br><span class="line">    F[u] = max(F[u], siz[v]);</span><br><span class="line">  &#125;</span><br><span class="line">  F[u] = max(F[u], siz_tree - siz[u]);</span><br><span class="line">  <span class="keyword">if</span> (F[u] &lt; F[rt]) rt = u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-更新"><a href="#2-更新" class="headerlink" title="2.更新"></a><strong>2.更新</strong></h4><p>对于一棵树的重心，优先考虑经过这个点的路径对答案的贡献(work统计，由题意而定)</p><h4 id="3-继续递归"><a href="#3-继续递归" class="headerlink" title="3.继续递归"></a><strong>3.</strong>继续递归</h4><p>删去已经计算过的重心(vis标记)，继续递归其子树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="number">1</span>;</span><br><span class="line">  work(u);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = E[i].v;</span><br><span class="line">    <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">    F[rt = <span class="number">0</span>] = siz_tree = siz[v];</span><br><span class="line">    getroot(v, <span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完成所有的solve操作后，就可以得到想要的答案了</li><li>因为每一次寻找子树的大小不超过 $n/2$ 所以分治层数不超过 $logn$ 所以总复杂度 $nlogn$ </li></ul><p><strong>练习题</strong></p><ul><li>POJ 1741</li><li>BZOJ 1316</li><li>BZOJ 14680</li><li>BZOJ 2152</li><li>BZOJ 2599 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法-点分治 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线段树类·数据结构的简单运用--基础篇</title>
      <link href="/blogs/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/blogs/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>线段树？顾名思义，就是一个节点维护某个区间的信息的数据结构</p><p>线段树有许多迷人的性质，我认为它是最美妙的数据结构了</p><p>它可以有很多的扩展变形：动态开点，可持久化线段树，树套树，线段树分治等…</p><p>实现方式的不一样也会带来不一样的效果</p><p>黑科技技巧更是有很多呢</p><p>那就来研究一下吧qwq</p><hr><h3 id="前置技能：静态线段树维护"><a href="#前置技能：静态线段树维护" class="headerlink" title="前置技能：静态线段树维护"></a>前置技能：静态线段树维护</h3><p>静态线段树维护是一切线段树的基础了</p><p>首先，线段树肯定是需要维护区间信息的</p><p>最核心的思想就是<strong>由小区间信息合并成大区间信息</strong></p><p>而通常表示至少长度为2的区间的节点一般有两个子区间，并且长度均匀分配</p><h4 id="前置技能0：数据表示方法"><a href="#前置技能0：数据表示方法" class="headerlink" title="前置技能0：数据表示方法"></a>前置技能0：数据表示方法</h4><p>在静态线段树中，数据需要怎么储存呢？</p><p>首先我们需要一些静态的空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> val[N &lt;&lt; <span class="number">2</span>]；</span><br></pre></td></tr></table></figure><p>这里的$N &lt;&lt;2$是因为实际线段树节点是$2*N-1$个的，为了防止叶子节点爆炸，还需要再多一倍</p><p>那么接下来，看看节点的表示方法</p><p>首先假设线段树的范围是$[1,n]$，我们默认1号节点维护了$[1,n]$区间信息</p><p>剩下对于每个节点t（包含1）</p><p>都可以构造一种表示方法使得空间被完美利用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD (t &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RD (t &lt;&lt; 1 | 1)</span></span><br></pre></td></tr></table></figure><p>枚举一下情境就会发现这样表示是一定可以把空间利用完全的</p><h4 id="前置技能1：维护信息"><a href="#前置技能1：维护信息" class="headerlink" title="前置技能1：维护信息"></a>前置技能1：维护信息</h4><h5 id="前置技能1-1：向上维护标记"><a href="#前置技能1-1：向上维护标记" class="headerlink" title="前置技能1-1：向上维护标记"></a>前置技能1-1：向上维护标记</h5><p>怎么从左右儿子获得当前区间的全部信息呢？</p><p>用一个函数来实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="comment">//example : maxv[t] = max(maxv[LD], maxv[RD]);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要找到对应的信息合并方式就可以了</p><p>如果需要维护的信息比较复杂，有一个办法：<strong>分解成很多个可以维护简单信息</strong></p><h5 id="前置技能1-2：向下传递标记"><a href="#前置技能1-2：向下传递标记" class="headerlink" title="前置技能1-2：向下传递标记"></a>前置技能1-2：向下传递标记</h5><p>这个思想是因为每次我们不能把左右标记传到叶子节点</p><p>因为这样的话复杂度就炸裂了</p><p>所以考虑怎么优化？</p><p>我们需要用到一个叫做<code>lazy标记</code>的东西</p><p>这个东西可以储存我们还没有下放的标记</p><p>可以让我们在用到这个区间信息的时候再来慢慢下传</p><p>有一个结论，<strong>任意一个区间在线段树上最多被分成log个区间</strong></p><p>所以复杂度就有保证了</p><p>本人习惯实现两个函数分别表示维护当前层的更新信息和将标记下传到子节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lazy[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushnow</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//用 tag 更新 t 的信息</span></span><br><span class="line">  <span class="comment">//维护 tag 和 lazy[t] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lazy[t]) &#123;</span><br><span class="line">    pushnow(LD, lazy[t]);</span><br><span class="line">    pushnow(RD, lazy[t]);</span><br><span class="line">    lazy[t] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前置技能2：建树"><a href="#前置技能2：建树" class="headerlink" title="前置技能2：建树"></a>前置技能2：建树</h4><p>建树，顾名思义，就是把这个线段树给建出来</p><p>具体实现方法是递归建树，因为线段树的左右儿子节点维护的区间的并就是当前节点维护的区间</p><p>那么我们就可以递归分配左右儿子区间了</p><p>因为要保证树高，所以每次分配的时候以当前区间$[l,r]$的中间节点$mid = (l + r) &gt;&gt; 1$作为分界线</p><p>如果建树的时候需要初始化一些信息就随机应变咯</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(LD, l, mid);</span><br><span class="line">  build(RD, mid + <span class="number">1</span>, r);</span><br><span class="line">  pushup(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前置技能3：单点修改"><a href="#前置技能3：单点修改" class="headerlink" title="前置技能3：单点修改"></a>前置技能3：单点修改</h4><p>唔，现在需要改一个点的信息？怎么办？</p><p>可以直接按照区间的范围递归找到那个你需要找的点，因为<strong>线段树最多只有log层</strong>，所以复杂度是有保证的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_point</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    pushnow(t, tag);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) modify_point(LD, l, mid, pos, tag);</span><br><span class="line">  <span class="keyword">else</span> modify_point(RD, mid + <span class="number">1</span>, r, pos, tag);</span><br><span class="line">  pushup(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前置技能4：单点查询"><a href="#前置技能4：单点查询" class="headerlink" title="前置技能4：单点查询"></a>前置技能4：单点查询</h4><p>现在要查询一个点的信息？</p><p>有些毒瘤手段先不说……</p><p>就暴力递归就可以了，和单点查询一样的思路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_point</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> something_you_need;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) <span class="keyword">return</span> query_point(LD, l, mid, pos);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> query_point(RD, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">  <span class="comment">//询问的时候不需要更新当前的信息，因为没有改变qwq</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前置技能5：区间修改"><a href="#前置技能5：区间修改" class="headerlink" title="前置技能5：区间修改"></a>前置技能5：区间修改</h4><p>比单点修改稍微复杂一点，现在我们需要修改一整个区间的信息？怎么办？</p><p>假设我们在考虑一个节点t，并且需要修改的区间$[ql,qr]$并没有包含t的区间$[l,r]$怎么办？</p><p>如果$qr\le mid$，则这个修改只对t的左边儿子区间有影响，向左递归问题</p><p>如果$mid&lt;ql$，则这个修改只对t的右边儿子区间有影响，向右递归问题</p><p>还剩一种情况，就是t的左右区间各包含了一部分的$[ql,qr]$怎么办？，那么就同时暴力递归到左右两个子区间就可以了，因为有一个刚才提到的结论：<strong>任意一个区间在线段树上最多被分成log个区间</strong></p><p>所以复杂度还是有保证的</p><p><strong>注意一定要在递归成子区间之前下传标记并更新子区间信息哦！！</strong>，不然的话可能会出现神奇的错误（比如说当下传的时候有一些特殊的限制…..过会再讲）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_segment</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">    pushnow(t, tag);<span class="comment">//初学者可以仔细理解一下这个pushnow的作用,dalao跳过</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pushdown(t);<span class="comment">//向下传递一波标记</span></span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (qr &lt;= mid) modify_segment(LD, l, mid, ql, qr, tag);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mod) modify_segment(RD, mid + <span class="number">1</span>, r, ql, qr, tag);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    modify_segment(LD, l, mid, ql, mid, tag);</span><br><span class="line">    modify_segment(RD, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, tag);</span><br><span class="line">  &#125;</span><br><span class="line">  pushup(t);<span class="comment">//向上更新一波信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前置技能6：区间查询"><a href="#前置技能6：区间查询" class="headerlink" title="前置技能6：区间查询"></a>前置技能6：区间查询</h4><p>只要理解了区间修改查询就不是问题啦</p><p>还需要注意一下，因为区间查询的时候下传的标记都是完整的（覆盖了整个区间），所以区间信息不需要重新向上维护，因为$pushnow$函数已经把这个区间的信息维护了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_segment</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> something_you_need;</span><br><span class="line">  pushdown(t);</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query_segment(LD, l, mid, ql, qr);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid) <span class="keyword">return</span> query_segment(RD, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">//合并res和query_segment(LD, l, mid, ql, mid)的信息</span></span><br><span class="line">    <span class="comment">//合并res和query_segment(RD, mid + 1, r, mid + 1, qr)的信息</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="前置技能拓展：动态开点线段树"><a href="#前置技能拓展：动态开点线段树" class="headerlink" title="前置技能拓展：动态开点线段树"></a>前置技能拓展：动态开点线段树</h3><p>动态开点是什么？就是不给每个节点分配固定的内存</p><p>因为如果分配内存可能会对内存空间造成极大的浪费</p><p>所以我们每次只给需要用到的区间分配内存并建立节点</p><p>应用于线段树合并和主席树和一些神奇的东西</p><p>因为<strong>主席树和一般的动态开点线段树有不小的区别，所以在这里不包含主席树的维护方式，后面单独讲解</strong></p><h4 id="前置技能拓展0：数据表示方法"><a href="#前置技能拓展0：数据表示方法" class="headerlink" title="前置技能拓展0：数据表示方法"></a>前置技能拓展0：数据表示方法</h4><p>因为线段树不再是静态的了，显然是不能给每个节点分配静态的儿子</p><p>所以考虑用数组记录下来</p><p>因为需要动态分配内存，所以我们还需要一个指针记录分配到哪里了，并且需要一个指针记录根节点是什么</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> rt, tot = <span class="number">0</span>;<span class="comment">//rt 根节点 tot 当前指针</span></span><br><span class="line"><span class="keyword">int</span> ls[N], rs[N]，;<span class="comment">//一个节点的左右儿子</span></span><br></pre></td></tr></table></figure><h4 id="前置技能拓展1：插入节点信息"><a href="#前置技能拓展1：插入节点信息" class="headerlink" title="前置技能拓展1：插入节点信息"></a>前置技能拓展1：插入节点信息</h4><p>和静态线段树略有不同的是</p><p>动态开点线段树需要判断当前节点存不存在并分配内存</p><p>而且单次只会插入一个位置的信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!t) t = ++tot;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) insert(ls[t], l, mid, pos);</span><br><span class="line">  <span class="keyword">else</span> insert(rs[t], mid + <span class="number">1</span>, r, pos);</span><br><span class="line">  pushup(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前置技能拓展2：动态开点线段树的合并"><a href="#前置技能拓展2：动态开点线段树的合并" class="headerlink" title="前置技能拓展2：动态开点线段树的合并"></a>前置技能拓展2：动态开点线段树的合并</h4><p>有的时候我们在维护一些联通块的信息的时候需要用到动态开点线段树的合并</p><p>这样就可以快速合并两个联通块的信息了</p><p>这个算法的核心代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isleaf</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !ls[t] &amp;&amp; !rs[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">  <span class="keyword">if</span> (isleaf(x) &amp;&amp; isleaf(y)) &#123;</span><br><span class="line">    <span class="comment">//把y的信息合并到x上</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  pushdown(x), pushdown(y);</span><br><span class="line">  ls[x] = merge(ls[x], ls[y]);</span><br><span class="line">  rs[x] = merge(rs[x], rs[y]);</span><br><span class="line">  pushup(x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说就是如果当前两个节点都存在，就需要暴力合并两个节点的左儿子和右儿子</p><p>如果只有一个节点存在就可以直接返回了</p><p>需要特别注意一下<strong>如果两个节点都存在但是都没有左右儿子直接合并儿子会丢失信息，这个时候就需要直接合并了</strong></p><p>暴力合并那一步看起来复杂度是错的</p><p>但是仔细想一想这个算法每一次运行用$O(1)$的代价删除1个节点</p><p>因为是动态开点，所以最开始最多有$nlog(n)$个节点，合并完后节点数是$[1,n]$的级别</p><p>所以复杂度是$O(nlog(n))$</p><hr><p>接下来进入正题</p><h3 id="各种各样的线段树类别"><a href="#各种各样的线段树类别" class="headerlink" title="各种各样的线段树类别"></a>各种各样的线段树类别</h3><h4 id="1-普通线段树"><a href="#1-普通线段树" class="headerlink" title="1.普通线段树"></a>1.普通线段树</h4><p>很简单的线段树，维护的区间就是在原序列中的区间</p><p>可以支持一些简单的操作：</p><ol><li>区间修改（加，减，乘）</li><li>区间查询（和，最大值，最小值，gcd，lcm）</li></ol><p>注意一下维护的顺序就行了，其实并不难</p><p>其实对于不同的操作，需要修改的只有维护信息的三个函数：$pushup,pushdown,pushnow$</p><p>也可以支持一些不那么简单的操作：</p><ol><li>区间修改（区间开根号，区间位运算，<del>区间取max，区间取min</del>）</li><li>区间查询（中位数，带权中位数，<del>历史最大值</del>）</li></ol><p>需要用到一些比较黑科技的东西，我也不太会</p><h4 id="2-值域线段树"><a href="#2-值域线段树" class="headerlink" title="2.值域线段树"></a>2.值域线段树</h4><p>研究明白了值域线段树就可以初步感受到线段树的奥妙了</p><p>首先这里的值域不要过于死板地理解</p><p>值域可以是数的大小，时间，权值，甚至是相对大小关系？</p><p>存在无限的可能</p><h5 id="值域线段树小探究：全序集维护"><a href="#值域线段树小探究：全序集维护" class="headerlink" title="值域线段树小探究：全序集维护"></a>值域线段树小探究：全序集维护</h5><p>来科普一些简单的全序集维护知识吧</p><p>维护全序集，大概是需要支持：</p><ol><li>插入一个数</li><li>删除一个数</li><li>查询一个数的排名</li><li>查询排名是k的数</li><li>查询一个数的前驱</li><li>查询一个数的后继</li></ol><p>首先轻轻松松地离线离散化一下</p><p>然后我们发现实际上需要支持地操作只有前四个，因为后两个都是可以通过前面转化得到的</p><p>来看看怎么实现，因为线段树维护的是值域，所以我们只需要记录每个数的出现次数就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> siz[N];</span><br></pre></td></tr></table></figure><p>接下来：</p><h6 id="简单的pushup"><a href="#简单的pushup" class="headerlink" title="简单的pushup"></a>简单的pushup</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  siz[t] = siz[LD] + siz[RD];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> vl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    siz[t]++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (vl &lt;= mid) insert(LD, l, mid, vl);</span><br><span class="line">  <span class="keyword">else</span> insert(RD, mid + <span class="number">1</span>, r, vl);</span><br><span class="line">  pushup(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>和插入差不多，就是$siz_t$减少1就可以了</p><h6 id="查询一个数的排名"><a href="#查询一个数的排名" class="headerlink" title="查询一个数的排名"></a>查询一个数的排名</h6><p>每次如果当前节点大小大于mid就需要加上左边的数的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> vl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (vl &lt;= mid) <span class="keyword">return</span> rank(LD, l, mid, vl);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> siz[LD] + rank(RD, mid + <span class="number">1</span>, r, vl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="查询第k小"><a href="#查询第k小" class="headerlink" title="查询第k小"></a>查询第k小</h6><p>每次走到一个节点根据左儿子的大小判断一下该向哪边递归就可以了</p><p>注意返回的是离散后的下标，需要还原成本身的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (siz[LD] &gt;= k) <span class="keyword">return</span> kth(LD, l, mid, k);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> kth(RD, mid + <span class="number">1</span>, r, k - siz[LD]);<span class="comment">//变成计算右儿子区间排名是k - siz[LD]的数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="前驱-amp-后继"><a href="#前驱-amp-后继" class="headerlink" title="前驱&amp;后继"></a>前驱&amp;后继</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//传入离散后的下标</span></span><br><span class="line">  <span class="keyword">return</span> kth(<span class="number">1</span>, <span class="number">1</span>, n, rank(<span class="number">1</span>, <span class="number">1</span>, n, x) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//传入离散后的下标</span></span><br><span class="line">  <span class="keyword">return</span> kth(<span class="number">1</span>, <span class="number">1</span>, n, rank(<span class="number">1</span>, <span class="number">1</span>, n, x + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比平衡树好写到不知道哪里去有没有qwq？</p><p>值域线段树虽然没有办法维护在原序列中的大小关系</p><p>但是却可以优化许多根值域有关的计算过程，常见于线段树优化DP或线段树分治</p><p>值域线段树还有许多奇妙的性质，后面慢慢探究</p><hr><h3 id="基于线段树实现的数据结构"><a href="#基于线段树实现的数据结构" class="headerlink" title="基于线段树实现的数据结构"></a>基于线段树实现的数据结构</h3><h4 id="1-主席树"><a href="#1-主席树" class="headerlink" title="1.主席树"></a>1.主席树</h4><p>也叫做<strong>可持久化线段树</strong></p><p>最大的特点是<strong>必须离线且不支持修改，只支持查询</strong></p><p>本身为什么叫可持久化线段树呢？</p><p>因为每棵树代表的节点维护了一个前缀的信息</p><p>这样就很方便进行区间查询（差分的思想）</p><p>但是如果暴力开线段树会发生什么？</p><p><strong>空间复杂度$O(n^2)$</strong>不可承受</p><p>观察一下我们要维护的东西</p><p>因为是一个前缀，所以有很大一部分信息都是可以从前面一棵树继承过来的</p><p>那么我们考虑优化这个过程</p><p>事实证明，每次我们插入一个信息实际上需要修改的只有一条长度是$log(n)$的链</p><p>那么就把所有不需要新建的节点直接继承过来</p><p>因此需要动态开点</p><p>实现起来是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;t, <span class="keyword">int</span> last, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">  t = ++tot;</span><br><span class="line">  <span class="comment">//t 从 last 继承一些信息</span></span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">  ls[t] = ls[last];<span class="comment">//继承儿子信息</span></span><br><span class="line">  rs[t] = rs[last];</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//判断一下需要新建哪个节点？</span></span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) insert(ls[t], ls[last], l, mid, pos);</span><br><span class="line">  <span class="keyword">else</span> insert(rs[t], rs[last], mid + <span class="number">1</span>, r, pos);</span><br><span class="line">  pushup(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常主席树维护的信息都是前缀可减的，不然是没有办法查询的</p><p>在这里举两个简单的例子，把刚才维护全序集的rank和kth照搬到区间上</p><p>其实很简单，只需要每次查询的时候做差就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> last, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> vl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (vl &lt;= mid) <span class="keyword">return</span> rank(ls[t], ls[last], l, mid, vl);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> siz[ls[t]] - siz[ls[last]] + rank(rs[t], rs[last], mid + <span class="number">1</span>, r, vl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> last, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, sizl = siz[ls[t]] - siz[ls[last]];</span><br><span class="line"><span class="keyword">if</span> (k &lt;= sizl) <span class="keyword">return</span> kth(ls[t], ls[last], l, mid, k);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> kth(rs[t], rs[last], mid + <span class="number">1</span>, r, k - sizl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现主席树维护和权值线段树的维护区别就只有一个范围的限制</p><p>但是主席树还有一些奇妙的用途？</p><p>先说几个常见的主席树套路：</p><h6 id="可持久化原数组顺序，内层使用权值线段树"><a href="#可持久化原数组顺序，内层使用权值线段树" class="headerlink" title="可持久化原数组顺序，内层使用权值线段树"></a>可持久化原数组顺序，内层使用权值线段树</h6><p>这样的主席树应该是最常见的</p><p>可以解决一些和至于有关的区间查询问题    ，就是权值线段树的简单扩展</p><h6 id="可持久化值域，内层使用原数组顺序"><a href="#可持久化值域，内层使用原数组顺序" class="headerlink" title="可持久化值域，内层使用原数组顺序"></a>可持久化值域，内层使用原数组顺序</h6><p>这个思路很神奇</p><p>是从<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2653" target="_blank" rel="noopener">这道题</a>中学习到的</p><p>有的时候我们不能直接维护有关值域的信息但是如果知道了当前的值是可以很方便地维护出原数组信息的时候</p><p>我们就可以考虑用可持久化值域的方法，并在内层树中消除掉值域的影响进行解题</p><p>主席树还有一些神奇的奇技淫巧……技巧篇给予讲解吧</p><h4 id="2-树套树"><a href="#2-树套树" class="headerlink" title="2.树套树"></a>2.树套树</h4><p>感觉很套路但是绝对不想写的东西</p><p>其实理解起来并不难</p><p>有很多线段树套线段树，线段树套平衡树，主席树套线段树，线段树套主席树之类的东西</p><p>一般是一眼就告诉你要树套树，然后就不想写了</p><p>在这里给一个沙雕题的example</p><p>给你一个矩阵，让你每次把一个矩形的中心节点权值改变乘成矩形中最大最小权值的平均数</p><p>首先肯定是树套树维护的</p><p>先把变量定义好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(t) (t &lt;&lt; 1) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RD(t) (t &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> maxv[N &lt;&lt; <span class="number">2</span>][N &lt;&lt; <span class="number">2</span>], minv[N &lt;&lt; <span class="number">2</span>][N &lt;&lt; <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>然后把内层的pushup函数写一写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  maxv[id][t] = max(maxv[id][LD(t)], maxv[id][RD(t)]);</span><br><span class="line">  minv[id][t] = min(minv[id][LD(t)], minv[id][RD(t)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每个内层树，如果属于外层树的叶子节点，那么可以直接暴力更新，复杂度$O(log(n))$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_y</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> vl, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    minv[id][t] = vl;</span><br><span class="line">    maxv[id][t] = vl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) modify_y(LD(t), l, mid, pos, vl, id);</span><br><span class="line">  <span class="keyword">else</span> modify_y(RD(t), mid + <span class="number">1</span>, r, pos, vl, id);</span><br><span class="line">  pushup(t, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后如果要更新不是叶子节点外层树对应的内层树怎么办？</p><p>考虑从外层树的儿子节点合并对应的信息，只需要修改有影响的一条链，复杂度$O(nlog(n))$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_y</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    minv[id][t] = min(minv[LD(id)][t], minv[RD(id)][t]);</span><br><span class="line">    maxv[id][t] = max(maxv[LD(id)][t], maxv[RD(id)][t]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) update_y(LD(t), l, mid, pos, id);</span><br><span class="line">  <span class="keyword">else</span> update_y(RD(t), mid + <span class="number">1</span>, r, pos, id);</span><br><span class="line">  pushup(t, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内层树的查询就简单而套路了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pi <span class="title">query_y</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> pi(maxv[id][t], minv[id][t]);</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query_y(LD(t), l, mid, ql, qr, id);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid) <span class="keyword">return</span> query_y(RD(t), mid + <span class="number">1</span>, r, ql, qr, id);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    pi ansl = query_y(LD(t), l, mid, ql, mid, id);</span><br><span class="line">    pi ansr = query_y(RD(t), mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, id);</span><br><span class="line">    <span class="keyword">return</span> pi(max(ansl.first, ansr.first), min(ansl.second, ansr.second));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外层树修改的时候需要判断一下当前节点是不是叶子，如果是叶子直接更新y</p><p>否则先递归问题再调用$update_y$函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_x</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> vl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    modify_y(<span class="number">1</span>, <span class="number">1</span>, n, y, vl, t);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= mid) modify_x(LD(t), l, mid, x, y, vl);</span><br><span class="line">  <span class="keyword">else</span> modify_x(RD(t), mid + <span class="number">1</span>, r, x, y, vl);</span><br><span class="line">  update_y(<span class="number">1</span>, <span class="number">1</span>, n, y, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外层树的查询就是如果被查询区间包含调用内层查询，否则递归问题，简单而套路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pi <span class="title">query_x</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xl &lt;= l &amp;&amp; r &lt;= xr) <span class="keyword">return</span> query_y(<span class="number">1</span>, <span class="number">1</span>, n, yl, yr, t);</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (xr &lt;= mid) <span class="keyword">return</span> query_x(LD(t), l, mid, xl, xr, yl, yr);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (xl &gt; mid) <span class="keyword">return</span> query_x(RD(t), mid + <span class="number">1</span>, r, xl, xr, yl, yr);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    pi ansl = query_x(LD(t), l, mid, xl, mid, yl, yr);</span><br><span class="line">    pi ansr = query_x(RD(t), mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, xr, yl, yr);</span><br><span class="line">    <span class="keyword">return</span> pi(max(ansl.first, ansr.first), min(ansl.second, ansr.second));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树套树也有很多变形</p><p>但无非就是外层处理到内层递归的简单套路，多写几道题体会一下就可以了</p><p>只要代码实现练习到位是很简单的</p><p>所以千万不要怕这个东西</p><h4 id="3-李超树"><a href="#3-李超树" class="headerlink" title="3.李超树"></a>3.李超树</h4><p>李超树是一种用来维护线段/函数的神奇数据结构</p><p>简单李超树支持查询一个x对应的所有y值的相关信息</p><p>用线段树来存储每个区间的<strong>相对最优解</strong></p><p>这里用到了一个<strong>永久化标记的思想</strong>，这个在技巧篇讲……</p><p>这个东西很好啊，每个节点记录区间的相对最优解之后</p><p>直接dfs到叶子节点把路径上经过的所有节点的权值全部取max就可以了</p><p>正确性非常显然，但是怎么维护呢？</p><p>我们假设当前要更新的是一个节点$p_t$，那么如果$p_t$的k大于拿来更新的$val$的k</p><p>如果在$mid$处$p_t$大于$val$，那么显然在$[mid+1,r]$这个区间里val不可能比$p_t$更优</p><p>所以就把$val$递归到左区间更新</p><p>如果在$mid$处$p_t$小于$val$，那么在$[l,mid]$这个区间$p_t$不可能比$val$更优</p><p>所以就把$p_t$递归到右区间，再把$p_t$替换成val就可以了</p><p>只需要按照k的大小关系分类讨论一下就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">  <span class="keyword">double</span> k, b;</span><br><span class="line">&#125; p[(MAXN &lt;&lt; <span class="number">2</span>) + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, Line a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.k * (<span class="keyword">double</span>) x + a.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, Line a, Line b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> calc(x, a) &gt; calc(x, b); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, Line vl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cmp(l, vl, p[t])) p[t] = vl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (p[t].k &lt;= vl.k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cmp(mid, vl, p[t])) &#123;</span><br><span class="line">      modify(LD, l, mid, p[t]);</span><br><span class="line">      p[t] = vl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      modify(RD, mid + <span class="number">1</span>, r, vl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cmp(mid, vl, p[t])) &#123;</span><br><span class="line">      modify(RD, mid + <span class="number">1</span>, r, p[t]);</span><br><span class="line">      p[t] = vl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      modify(LD, l, mid, vl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span> calc(pos, p[t]);</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) <span class="keyword">return</span> max(calc(pos, p[t]), query(LD, l, mid, pos));</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">return</span> max(calc(pos, p[t]), query(RD, mid + <span class="number">1</span>, r, pos));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-ZKW线段树"><a href="#4-ZKW线段树" class="headerlink" title="4.ZKW线段树"></a>4.ZKW线段树</h4><p>我觉得严格意义来说这个算是奇技淫巧</p>]]></content>
      
      
      <categories>
          
          <category> 知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-线段树 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
